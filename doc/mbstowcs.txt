  
# mbstowcs(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
NOTES | EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    MBSTOWCS(3)             Linux Programmer's Manual            MBSTOWCS(3)
    
## NAME         top
    
    
           mbstowcs - convert a multibyte string to a wide-character string
    
## SYNOPSIS         top
    
    
           #include <stdlib.h>
    
           size_t mbstowcs(wchar_t restrict _dest_ , const char restrict _src_ ,
                           size_t _n_ );
    
## DESCRIPTION         top
    
    
           If _dest_ is not NULL, the mbstowcs () function converts the
           multibyte string _src_ to a wide-character string starting at _dest_.
           At most _n_ wide characters are written to _dest_.  The sequence of
           characters in the string _src_ shall begin in the initial shift
           state.  The conversion can stop for three reasons:
    
           1. An invalid multibyte sequence has been encountered.  In this
              case, _(size_t) -1_ is returned.
    
           2. _n_ non-L'\0' wide characters have been stored at _dest_.  In this
              case, the number of wide characters written to _dest_ is
              returned, but the shift state at this point is lost.
    
           3. The multibyte string has been completely converted, including
              the terminating null character ('\0').  In this case, the
              number of wide characters written to _dest_ , excluding the
              terminating null wide character, is returned.
    
           The programmer must ensure that there is room for at least _n_ wide
           characters at _dest_.
    
           If _dest_ is NULL, _n_ is ignored, and the conversion proceeds as
           above, except that the converted wide characters are not written
           out to memory, and that no length limit exists.
    
           In order to avoid the case 2 above, the programmer should make
           sure _n_ is greater than or equal to _mbstowcs(NULL,src,0)+1_.
    
## RETURN VALUE         top
    
    
           The mbstowcs () function returns the number of wide characters
           that make up the converted part of the wide-character string, not
           including the terminating null wide character.  If an invalid
           multibyte sequence was encountered, _(size_t) -1_ is returned.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ mbstowcs ()                            │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008, C99.
    
## NOTES         top
    
    
           The behavior of mbstowcs () depends on the LC_CTYPE category of
           the current locale.
    
           The function mbsrtowcs(3) provides a better interface to the same
           functionality.
    
## EXAMPLES         top
    
    
           The program below illustrates the use of mbstowcs (), as well as
           some of the wide character classification functions.  An example
           run is the following:
    
               $ ./t_mbstowcs de_DE.UTF-8 Grüße!
               Length of source string (excluding terminator):
                   8 bytes
                   6 multibyte characters
    
               Wide character string is: Grüße! (6 characters)
                   G alpha upper
                   r alpha lower
                   ü alpha lower
                   ß alpha lower
                   e alpha lower
                   ! !alpha
    
       Program source
    
           #include <wctype.h>
           #include <locale.h>
           #include <wchar.h>
           #include <stdio.h>
           #include <string.h>
           #include <stdlib.h>
    
           int
           main(int argc, char argv[])
           {
               size_t mbslen;      / Number of multibyte characters in source /
               wchar_t wcs;       / Pointer to converted wide character string /
    
               if (argc < 3) {
                   fprintf(stderr, "Usage: %s <locale> <string>\n", argv[0]);
                   exit(EXIT_FAILURE);
               }
    
               / Apply the specified locale. /
    
               if (setlocale(LC_ALL, argv[1]) == NULL) {
                   perror("setlocale");
                   exit(EXIT_FAILURE);
               }
    
               / Calculate the length required to hold argv[2] converted to
                  a wide character string. /
    
               mbslen = mbstowcs(NULL, argv[2], 0);
               if (mbslen == (size_t) -1) {
                   perror("mbstowcs");
                   exit(EXIT_FAILURE);
               }
    
               / Describe the source string to the user. /
    
               printf("Length of source string (excluding terminator):\n");
               printf("    %zu bytes\n", strlen(argv[2]));
               printf("    %zu multibyte characters\n\n", mbslen);
    
               / Allocate wide character string of the desired size.  Add 1
                  to allow for terminating null wide character (L'\0'). /
    
               wcs = calloc(mbslen + 1, sizeof(wcs));
               if (wcs == NULL) {
                   perror("calloc");
                   exit(EXIT_FAILURE);
               }
    
               / Convert the multibyte character string in argv[2] to a
                  wide character string. /
    
               if (mbstowcs(wcs, argv[2], mbslen + 1) == (size_t) -1) {
                   perror("mbstowcs");
                   exit(EXIT_FAILURE);
               }
    
               printf("Wide character string is: %ls (%zu characters)\n",
                       wcs, mbslen);
    
               / Now do some inspection of the classes of the characters in
                  the wide character string. /
    
               for (wchar_t wp = wcs; wp != 0; wp++) {
                   printf("    %lc ", (wint_t) wp);
    
                   if (!iswalpha(wp))
                       printf("!");
                   printf("alpha ");
    
                   if (iswalpha(wp)) {
                       if (iswupper(wp))
                           printf("upper ");
    
                       if (iswlower(wp))
                           printf("lower ");
                   }
    
                   putchar('\n');
               }
    
               exit(EXIT_SUCCESS);
           }
    
## SEE ALSO         top
    
    
           mblen(3), mbsrtowcs(3), mbtowc(3), wcstombs(3), wctomb(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                    MBSTOWCS(3)
    
