  
# getauxval(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | ATTRIBUTES
| CONFORMING TO | NOTES | BUGS | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    GETAUXVAL(3)            Linux Programmer's Manual           GETAUXVAL(3)
    
## NAME         top
    
    
           getauxval - retrieve a value from the auxiliary vector
    
## SYNOPSIS         top
    
    
           #include <sys/auxv.h>
    
           unsigned long getauxval(unsigned long _type_ );
    
## DESCRIPTION         top
    
    
           The getauxval () function retrieves values from the auxiliary
           vector, a mechanism that the kernel's ELF binary loader uses to
           pass certain information to user space when a program is
           executed.
    
           Each entry in the auxiliary vector consists of a pair of values:
           a type that identifies what this entry represents, and a value
           for that type.  Given the argument _type_ , getauxval () returns the
           corresponding value.
    
           The value returned for each _type_ is given in the following list.
           Not all _type_ values are present on all architectures.
    
           AT_BASE
                  The base address of the program interpreter (usually, the
                  dynamic linker).
    
           AT_BASE_PLATFORM
                  A pointer to a string (PowerPC and MIPS only).  On
                  PowerPC, this identifies the real platform; may differ
                  from AT_PLATFORM.  On MIPS, this identifies the ISA level
                  (since Linux 5.7).
    
           AT_CLKTCK
                  The frequency with which times(2) counts.  This value can
                  also be obtained via _sysconf(_SC_CLK_TCK)_.
    
           AT_DCACHEBSIZE
                  The data cache block size.
    
           AT_EGID
                  The effective group ID of the thread.
    
           AT_ENTRY
                  The entry address of the executable.
    
           AT_EUID
                  The effective user ID of the thread.
    
           AT_EXECFD
                  File descriptor of program.
    
           AT_EXECFN
                  A pointer to a string containing the pathname used to
                  execute the program.
    
           AT_FLAGS
                  Flags (unused).
    
           AT_FPUCW
                  Used FPU control word (SuperH architecture only).  This
                  gives some information about the FPU initialization
                  performed by the kernel.
    
           AT_GID The real group ID of the thread.
    
           AT_HWCAP
                  An architecture and ABI dependent bit-mask whose settings
                  indicate detailed processor capabilities.  The contents of
                  the bit mask are hardware dependent (for example, see the
                  kernel source file _arch/x86/include/asm/cpufeature.h_ for
                  details relating to the Intel x86 architecture; the value
                  returned is the first 32-bit word of the array described
                  there).  A human-readable version of the same information
                  is available via _/proc/cpuinfo_.
    
           AT_HWCAP2 (since glibc 2.18)
                  Further machine-dependent hints about processor
                  capabilities.
    
           AT_ICACHEBSIZE
                  The instruction cache block size.
    
           AT_L1D_CACHEGEOMETRY
                  Geometry of the L1 data cache, encoded with the cache line
                  size in bytes in the bottom 16 bits and the cache
                  associativity in the next 16 bits.  The associativity is
                  such that if N is the 16-bit value, the cache is N-way set
                  associative.
    
           AT_L1D_CACHESIZE
                  The L1 data cache size.
    
           AT_L1I_CACHEGEOMETRY
                  Geometry of the L1 instruction cache, encoded as for
                  AT_L1D_CACHEGEOMETRY.
    
           AT_L1I_CACHESIZE
                  The L1 instruction cache size.
    
           AT_L2_CACHEGEOMETRY
                  Geometry of the L2 cache, encoded as for
                  AT_L1D_CACHEGEOMETRY.
    
           AT_L2_CACHESIZE
                  The L2 cache size.
    
           AT_L3_CACHEGEOMETRY
                  Geometry of the L3 cache, encoded as for
                  AT_L1D_CACHEGEOMETRY.
    
           AT_L3_CACHESIZE
                  The L3 cache size.
    
           AT_PAGESZ
                  The system page size (the same value returned by
                  _sysconf(_SC_PAGESIZE)_ ).
    
           AT_PHDR
                  The address of the program headers of the executable.
    
           AT_PHENT
                  The size of program header entry.
    
           AT_PHNUM
                  The number of program headers.
    
           AT_PLATFORM
                  A pointer to a string that identifies the hardware
                  platform that the program is running on.  The dynamic
                  linker uses this in the interpretation of _rpath_ values.
    
           AT_RANDOM
                  The address of sixteen bytes containing a random value.
    
           AT_SECURE
                  Has a nonzero value if this executable should be treated
                  securely.  Most commonly, a nonzero value indicates that
                  the process is executing a set-user-ID or set-group-ID
                  binary (so that its real and effective UIDs or GIDs differ
                  from one another), or that it gained capabilities by
                  executing a binary file that has capabilities (see
                  capabilities(7)).  Alternatively, a nonzero value may be
                  triggered by a Linux Security Module.  When this value is
                  nonzero, the dynamic linker disables the use of certain
                  environment variables (see ld-linux.so(8)) and glibc
                  changes other aspects of its behavior.  (See also
                  secure_getenv(3).)
    
           AT_SYSINFO
                  The entry point to the system call function in the vDSO.
                  Not present/needed on all architectures (e.g., absent on
                  x86-64).
    
           AT_SYSINFO_EHDR
                  The address of a page containing the virtual Dynamic
                  Shared Object (vDSO) that the kernel creates in order to
                  provide fast implementations of certain system calls.
    
           AT_UCACHEBSIZE
                  The unified cache block size.
    
           AT_UID The real user ID of the thread.
    
## RETURN VALUE         top
    
    
           On success, getauxval () returns the value corresponding to _type_.
           If _type_ is not found, 0 is returned.
    
## ERRORS         top
    
    
           ENOENT (since glibc 2.19)
                  No entry corresponding to _type_ could be found in the
                  auxiliary vector.
    
## VERSIONS         top
    
    
           The getauxval () function was added to glibc in version 2.16.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ getauxval ()                           │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           This function is a nonstandard glibc extension.
    
## NOTES         top
    
    
           The primary consumer of the information in the auxiliary vector
           is the dynamic linker, ld-linux.so(8).  The auxiliary vector is a
           convenient and efficient shortcut that allows the kernel to
           communicate a certain set of standard information that the
           dynamic linker usually or always needs.  In some cases, the same
           information could be obtained by system calls, but using the
           auxiliary vector is cheaper.
    
           The auxiliary vector resides just above the argument list and
           environment in the process address space.  The auxiliary vector
           supplied to a program can be viewed by setting the LD_SHOW_AUXV
           environment variable when running a program:
    
               $ LD_SHOW_AUXV=1 sleep 1
    
           The auxiliary vector of any process can (subject to file
           permissions) be obtained via _/proc/[pid]/auxv_ ; see proc(5) for
           more information.
    
## BUGS         top
    
    
           Before the addition of the ENOENT error in glibc 2.19, there was
           no way to unambiguously distinguish the case where _type_ could not
           be found from the case where the value corresponding to _type_ was
           zero.
    
## SEE ALSO         top
    
    
           secure_getenv(3), vdso(7), ld-linux.so(8)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                   GETAUXVAL(3)
    
