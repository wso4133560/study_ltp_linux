  
# sysctl(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | CONFORMING
TO | NOTES | BUGS | EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    SYSCTL(2)               Linux Programmer's Manual              SYSCTL(2)
    
## NAME         top
    
    
           sysctl - read/write system parameters
    
## SYNOPSIS         top
    
    
           #include <unistd.h>
           #include <linux/sysctl.h>
    
           int _sysctl(struct __sysctl_args  _args_ );
    
## DESCRIPTION         top
    
    
           This system call no longer exists on current kernels! See NOTES.
    
           The _sysctl () call reads and/or writes kernel parameters.  For
           example, the hostname, or the maximum number of open files.  The
           argument has the form
    
               struct __sysctl_args {
                   int    name;    / integer vector describing variable /
                   int     nlen;    / length of this vector /
                   void   oldval;  / 0 or address where to store old value /
                   size_t oldlenp; / available room for old value,
                                       overwritten by actual size of old value /
                   void   newval;  / 0 or address of new value /
                   size_t  newlen;  / size of new value /
               };
    
           This call does a search in a tree structure, possibly resembling
           a directory tree under _/proc/sys_ , and if the requested item is
           found calls some appropriate routine to read or modify the value.
    
## RETURN VALUE         top
    
    
           Upon successful completion, _sysctl () returns 0.  Otherwise, a
           value of -1 is returned and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EACCES , EPERM
                  No search permission for one of the encountered
                  "directories", or no read permission where _oldval_ was
                  nonzero, or no write permission where _newval_ was nonzero.
    
           EFAULT The invocation asked for the previous value by setting
                  _oldval_ non-NULL, but allowed zero room in _oldlenp_.
    
           ENOTDIR
                  _name_ was not found.
    
## VERSIONS         top
    
    
           This system call first appeared in Linux 1.3.57.  It was removed
           in Linux 5.5; glibc support was removed in version 2.32.
    
## CONFORMING TO         top
    
    
           This call is Linux-specific, and should not be used in programs
           intended to be portable.  It originated in 4.4BSD.  Only Linux
           has the _/proc/sys_ mirror, and the object naming schemes differ
           between Linux and 4.4BSD, but the declaration of the sysctl ()
           function is the same in both.
    
## NOTES         top
    
    
           Use of this system call was long discouraged: since Linux 2.6.24,
           uses of this system call result in warnings in the kernel log,
           and in Linux 5.5, the system call was finally removed.  Use the
           _/proc/sys_ interface instead.
    
           Note that on older kernels where this system call still exists,
           it is available only if the kernel was configured with the
           CONFIG_SYSCTL_SYSCALL option.  Furthermore, glibc does not
           provide a wrapper for this system call, necessitating the use of
           syscall(2).
    
## BUGS         top
    
    
           The object names vary between kernel versions, making this system
           call worthless for applications.
    
           Not all available objects are properly documented.
    
           It is not yet possible to change operating system by writing to
           _/proc/sys/kernel/ostype_.
    
## EXAMPLES         top
    
    
           #define _GNU_SOURCE
           #include <unistd.h>
           #include <sys/syscall.h>
           #include <string.h>
           #include <stdio.h>
           #include <stdlib.h>
           #include <linux/sysctl.h>
    
           int _sysctl(struct __sysctl_args args );
    
           #define OSNAMESZ 100
    
           int
           main(void)
           {
               struct __sysctl_args args;
               char osname[OSNAMESZ];
               size_t osnamelth;
               int name[] = { CTL_KERN, KERN_OSTYPE };
    
               memset(&args, 0, sizeof(args));
               args.name = name;
               args.nlen = sizeof(name)/sizeof(name[0]);
               args.oldval = osname;
               args.oldlenp = &osnamelth;
    
               osnamelth = sizeof(osname);
    
               if (syscall(SYS__sysctl, &args) == -1) {
                   perror("_sysctl");
                   exit(EXIT_FAILURE);
               }
               printf("This machine is running %s\n", osnamelth, osname);
               exit(EXIT_SUCCESS);
           }
    
## SEE ALSO         top
    
    
           proc(5)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                      SYSCTL(2)
    
