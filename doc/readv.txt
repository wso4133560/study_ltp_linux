  
# readv(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | CONFORMING
TO | NOTES | EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    READV(2)                Linux Programmer's Manual               READV(2)
    
## NAME         top
    
    
           readv, writev, preadv, pwritev, preadv2, pwritev2 - read or write
           data into multiple buffers
    
## SYNOPSIS         top
    
    
           #include <sys/uio.h>
    
           ssize_t readv(int _fd_ , const struct iovec  _iov_ , int _iovcnt_ );
           ssize_t writev(int _fd_ , const struct iovec  _iov_ , int _iovcnt_ );
    
           ssize_t preadv(int _fd_ , const struct iovec  _iov_ , int _iovcnt_ ,
                           off_t _offset_ );
           ssize_t pwritev(int _fd_ , const struct iovec  _iov_ , int _iovcnt_ ,
                           off_t _offset_ );
    
           ssize_t preadv2(int _fd_ , const struct iovec  _iov_ , int _iovcnt_ ,
                           off_t _offset_ , int _flags_ );
           ssize_t pwritev2(int _fd_ , const struct iovec  _iov_ , int _iovcnt_ ,
                           off_t _offset_ , int _flags_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           preadv (), pwritev ():
               Since glibc 2.19:
                   _DEFAULT_SOURCE
               Glibc 2.19 and earlier:
                   _BSD_SOURCE
    
## DESCRIPTION         top
    
    
           The readv () system call reads _iovcnt_ buffers from the file
           associated with the file descriptor _fd_ into the buffers described
           by _iov_ ("scatter input").
    
           The writev () system call writes _iovcnt_ buffers of data described
           by _iov_ to the file associated with the file descriptor _fd_
           ("gather output").
    
           The pointer _iov_ points to an array of _iovec_ structures, defined
           in _< sys/uio.h>_ as:
    
               struct iovec {
                   void  iov_base;    / Starting address /
                   size_t iov_len;     / Number of bytes to transfer /
               };
    
           The readv () system call works just like read(2) except that
           multiple buffers are filled.
    
           The writev () system call works just like write(2) except that
           multiple buffers are written out.
    
           Buffers are processed in array order.  This means that readv ()
           completely fills _iov[0]_ before proceeding to _iov[1]_ , and so on.
           (If there is insufficient data, then not all buffers pointed to
           by _iov_ may be filled.)  Similarly, writev () writes out the entire
           contents of _iov[0]_ before proceeding to _iov[1]_ , and so on.
    
           The data transfers performed by readv () and writev () are atomic:
           the data written by writev () is written as a single block that is
           not intermingled with output from writes in other processes (but
           see pipe(7) for an exception); analogously, readv () is guaranteed
           to read a contiguous block of data from the file, regardless of
           read operations performed in other threads or processes that have
           file descriptors referring to the same open file description (see
           open(2)).
    
       preadv() and pwritev()
           The preadv () system call combines the functionality of readv ()
           and pread(2).  It performs the same task as readv (), but adds a
           fourth argument, _offset_ , which specifies the file offset at which
           the input operation is to be performed.
    
           The pwritev () system call combines the functionality of writev ()
           and pwrite(2).  It performs the same task as writev (), but adds a
           fourth argument, _offset_ , which specifies the file offset at which
           the output operation is to be performed.
    
           The file offset is not changed by these system calls.  The file
           referred to by _fd_ must be capable of seeking.
    
       preadv2() and pwritev2()
           These system calls are similar to preadv () and pwritev () calls,
           but add a fifth argument, _flags_ , which modifies the behavior on a
           per-call basis.
    
           Unlike preadv () and pwritev (), if the _offset_ argument is -1, then
           the current file offset is used and updated.
    
           The _flags_ argument contains a bitwise OR of zero or more of the
           following flags:
    
           RWF_DSYNC (since Linux 4.7)
                  Provide a per-write equivalent of the O_DSYNC open (2)
                  flag.  This flag is meaningful only for pwritev2 (), and
                  its effect applies only to the data range written by the
                  system call.
    
           RWF_HIPRI (since Linux 4.6)
                  High priority read/write.  Allows block-based filesystems
                  to use polling of the device, which provides lower
                  latency, but may use additional resources.  (Currently,
                  this feature is usable only on a file descriptor opened
                  using the O_DIRECT flag.)
    
           RWF_SYNC (since Linux 4.7)
                  Provide a per-write equivalent of the O_SYNC open (2) flag.
                  This flag is meaningful only for pwritev2 (), and its
                  effect applies only to the data range written by the
                  system call.
    
           RWF_NOWAIT (since Linux 4.14)
                  Do not wait for data which is not immediately available.
                  If this flag is specified, the preadv2 () system call will
                  return instantly if it would have to read data from the
                  backing storage or wait for a lock.  If some data was
                  successfully read, it will return the number of bytes
                  read.  If no bytes were read, it will return -1 and set
                  _errno_ to EAGAIN.  Currently, this flag is meaningful only
                  for preadv2 ().
    
           RWF_APPEND (since Linux 4.16)
                  Provide a per-write equivalent of the O_APPEND open (2)
                  flag.  This flag is meaningful only for pwritev2 (), and
                  its effect applies only to the data range written by the
                  system call.  The _offset_ argument does not affect the
                  write operation; the data is always appended to the end of
                  the file.  However, if the _offset_ argument is -1, the
                  current file offset is updated.
    
## RETURN VALUE         top
    
    
           On success, readv (), preadv (), and preadv2 () return the number of
           bytes read; writev (), pwritev (), and pwritev2 () return the number
           of bytes written.
    
           Note that it is not an error for a successful call to transfer
           fewer bytes than requested (see read(2) and write(2)).
    
           On error, -1 is returned, and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           The errors are as given for read(2) and write(2).  Furthermore,
           preadv (), preadv2 (), pwritev (), and pwritev2 () can also fail for
           the same reasons as lseek(2).  Additionally, the following errors
           are defined:
    
           EINVAL The sum of the _iov_len_ values overflows an _ssize_t_ value.
    
           EINVAL The vector count, _iovcnt_ , is less than zero or greater
                  than the permitted maximum.
    
           EOPNOTSUPP
                  An unknown flag is specified in _flags_.
    
## VERSIONS         top
    
    
           preadv () and pwritev () first appeared in Linux 2.6.30; library
           support was added in glibc 2.10.
    
           preadv2 () and pwritev2 () first appeared in Linux 4.6.  Library
           support was added in glibc 2.26.
    
## CONFORMING TO         top
    
    
           readv (), writev (): POSIX.1-2001, POSIX.1-2008, 4.4BSD (these
           system calls first appeared in 4.2BSD).
    
           preadv (), pwritev (): nonstandard, but present also on the modern
           BSDs.
    
           preadv2 (), pwritev2 (): nonstandard Linux extension.
    
## NOTES         top
    
    
           POSIX.1 allows an implementation to place a limit on the number
           of items that can be passed in _iov_.  An implementation can
           advertise its limit by defining IOV_MAX in _< limits.h>_ or at run
           time via the return value from _sysconf(_SC_IOV_MAX)_.  On modern
           Linux systems, the limit is 1024.  Back in Linux 2.0 days, this
           limit was 16.
    
       C library/kernel differences
           The raw preadv () and pwritev () system calls have call signatures
           that differ slightly from that of the corresponding GNU C library
           wrapper functions shown in the SYNOPSIS.  The final argument,
           _offset_ , is unpacked by the wrapper functions into two arguments
           in the system calls:
    
               unsigned long _pos_l_ , unsigned long _pos_
    
           These arguments contain, respectively, the low order and high
           order 32 bits of _offset_.
    
       Historical C library/kernel differences
           To deal with the fact that IOV_MAX was so low on early versions
           of Linux, the glibc wrapper functions for readv () and writev ()
           did some extra work if they detected that the underlying kernel
           system call failed because this limit was exceeded.  In the case
           of readv (), the wrapper function allocated a temporary buffer
           large enough for all of the items specified by _iov_ , passed that
           buffer in a call to read(2), copied data from the buffer to the
           locations specified by the _iov_base_ fields of the elements of
           _iov_ , and then freed the buffer.  The wrapper function for
           writev () performed the analogous task using a temporary buffer
           and a call to write(2).
    
           The need for this extra effort in the glibc wrapper functions
           went away with Linux 2.2 and later.  However, glibc continued to
           provide this behavior until version 2.10.  Starting with glibc
           version 2.9, the wrapper functions provide this behavior only if
           the library detects that the system is running a Linux kernel
           older than version 2.6.18 (an arbitrarily selected kernel
           version).  And since glibc 2.20 (which requires a minimum Linux
           kernel version of 2.6.32), the glibc wrapper functions always
           just directly invoke the system calls.
    
## EXAMPLES         top
    
    
           The following code sample demonstrates the use of writev ():
    
               char str0 = "hello ";
               char str1 = "world\n";
               struct iovec iov[2];
               ssize_t nwritten;
    
               iov[0].iov_base = str0;
               iov[0].iov_len = strlen(str0);
               iov[1].iov_base = str1;
               iov[1].iov_len = strlen(str1);
    
               nwritten = writev(STDOUT_FILENO, iov, 2);
    
## SEE ALSO         top
    
    
           pread(2), read(2), write(2)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                       READV(2)
    
