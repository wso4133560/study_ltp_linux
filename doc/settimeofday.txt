  
# gettimeofday(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | CONFORMING TO | NOTES
| SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    GETTIMEOFDAY(2)         Linux Programmer's Manual        GETTIMEOFDAY(2)
    
## NAME         top
    
    
           gettimeofday, settimeofday - get / set time
    
## SYNOPSIS         top
    
    
           #include <sys/time.h>
    
           int gettimeofday(struct timeval restrict _tv_ ,
                            struct timezone restrict _tz_ );
           int settimeofday(const struct timeval  _tv_ ,
                            const struct timezone  _tz_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           settimeofday ():
               Since glibc 2.19:
                   _DEFAULT_SOURCE
               Glibc 2.19 and earlier:
                   _BSD_SOURCE
    
## DESCRIPTION         top
    
    
           The functions gettimeofday () and settimeofday () can get and set
           the time as well as a timezone.
    
           The _tv_ argument is a _struct timeval_ (as specified in
           _< sys/time.h>_):
    
               struct timeval {
                   time_t      tv_sec;     / seconds /
                   suseconds_t tv_usec;    / microseconds /
               };
    
           and gives the number of seconds and microseconds since the Epoch
           (see time(2)).
    
           The _tz_ argument is a _struct timezone_ :
    
               struct timezone {
                   int tz_minuteswest;     / minutes west of Greenwich /
                   int tz_dsttime;         / type of DST correction /
               };
    
           If either _tv_ or _tz_ is NULL, the corresponding structure is not
           set or returned.  (However, compilation warnings will result if
           _tv_ is NULL.)
    
           The use of the _timezone_ structure is obsolete; the _tz_ argument
           should normally be specified as NULL.  (See NOTES below.)
    
           Under Linux, there are some peculiar "warp clock" semantics
           associated with the settimeofday () system call if on the very
           first call (after booting) that has a non-NULL _tz_ argument, the
           _tv_ argument is NULL and the _tz_minuteswest_ field is nonzero.
           (The _tz_dsttime_ field should be zero for this case.)  In such a
           case it is assumed that the CMOS clock is on local time, and that
           it has to be incremented by this amount to get UTC system time.
           No doubt it is a bad idea to use this feature.
    
## RETURN VALUE         top
    
    
           gettimeofday () and settimeofday () return 0 for success.  On
           error, -1 is returned and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EFAULT One of _tv_ or _tz_ pointed outside the accessible address
                  space.
    
           EINVAL ( settimeofday ()): _timezone_ is invalid.
    
           EINVAL ( settimeofday ()): _tv.tv_sec_ is negative or _tv.tv_usec_ is
                  outside the range [0..999,999].
    
           EINVAL (since Linux 4.3)
                  ( settimeofday ()): An attempt was made to set the time to a
                  value less than the current value of the CLOCK_MONOTONIC
                  clock (see clock_gettime(2)).
    
           EPERM The calling process has insufficient privilege to call
                  settimeofday (); under Linux the CAP_SYS_TIME capability is
                  required.
    
## CONFORMING TO         top
    
    
           SVr4, 4.3BSD.  POSIX.1-2001 describes gettimeofday () but not
           settimeofday ().  POSIX.1-2008 marks gettimeofday () as obsolete,
           recommending the use of clock_gettime(2) instead.
    
## NOTES         top
    
    
           The time returned by gettimeofday () _is_ affected by discontinuous
           jumps in the system time (e.g., if the system administrator
           manually changes the system time).  If you need a monotonically
           increasing clock, see clock_gettime(2).
    
           Macros for operating on _timeval_ structures are described in
           timeradd(3).
    
           Traditionally, the fields of _struct timeval_ were of type _long_.
    
       C library/kernel differences
           On some architectures, an implementation of gettimeofday () is
           provided in the vdso(7).
    
       The tz_dsttime field
           On a non-Linux kernel, with glibc, the _tz_dsttime_ field of _struct_
           _timezone_ will be set to a nonzero value by gettimeofday () if the
           current timezone has ever had or will have a daylight saving rule
           applied.  In this sense it exactly mirrors the meaning of
           daylight(3) for the current zone.  On Linux, with glibc, the
           setting of the _tz_dsttime_ field of _struct timezone_ has never been
           used by settimeofday () or gettimeofday ().  Thus, the following is
           purely of historical interest.
    
           On old systems, the field _tz_dsttime_ contains a symbolic constant
           (values are given below) that indicates in which part of the year
           Daylight Saving Time is in force.  (Note: this value is constant
           throughout the year: it does not indicate that DST is in force,
           it just selects an algorithm.)  The daylight saving time
           algorithms defined are as follows:
    
               DST_NONE / not on DST /
               DST_USA / USA style DST /
               DST_AUST / Australian style DST /
               DST_WET / Western European DST /
               DST_MET / Middle European DST /
               DST_EET / Eastern European DST /
               DST_CAN / Canada /
               DST_GB / Great Britain and Eire /
               DST_RUM / Romania /
               DST_TUR / Turkey /
               DST_AUSTALT / Australian style with shift in 1986 /
    
           Of course it turned out that the period in which Daylight Saving
           Time is in force cannot be given by a simple algorithm, one per
           country; indeed, this period is determined by unpredictable
           political decisions.  So this method of representing timezones
           has been abandoned.
    
## SEE ALSO         top
    
    
           date(1), adjtimex(2), clock_gettime(2), time(2), ctime(3),
           ftime(3), timeradd(3), capabilities(7), time(7), vdso(7),
           hwclock(8)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                GETTIMEOFDAY(2)
    
