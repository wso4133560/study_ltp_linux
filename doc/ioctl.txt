  
# ioctl(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | CONFORMING TO | NOTES
| SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    IOCTL(2)                Linux Programmer's Manual               IOCTL(2)
    
## NAME         top
    
    
           ioctl - control device
    
## SYNOPSIS         top
    
    
           #include <sys/ioctl.h>
    
           int ioctl(int _fd_ , unsigned long _request_ , ...);
    
## DESCRIPTION         top
    
    
           The ioctl () system call manipulates the underlying device
           parameters of special files.  In particular, many operating
           characteristics of character special files (e.g., terminals) may
           be controlled with ioctl () requests.  The argument _fd_ must be an
           open file descriptor.
    
           The second argument is a device-dependent request code.  The
           third argument is an untyped pointer to memory.  It's
           traditionally char  _argp_ (from the days before void  was valid
           C), and will be so named for this discussion.
    
           An ioctl () _request_ has encoded in it whether the argument is an
           _in_ parameter or _out_ parameter, and the size of the argument _argp_
           in bytes.  Macros and defines used in specifying an ioctl ()
           _request_ are located in the file _< sys/ioctl.h>_.  See NOTES.
    
## RETURN VALUE         top
    
    
           Usually, on success zero is returned.  A few ioctl () requests use
           the return value as an output parameter and return a nonnegative
           value on success.  On error, -1 is returned, and _errno_ is set to
           indicate the error.
    
## ERRORS         top
    
    
           EBADF _fd_ is not a valid file descriptor.
    
           EFAULT _argp_ references an inaccessible memory area.
    
           EINVAL _request_ or _argp_ is not valid.
    
           ENOTTY _fd_ is not associated with a character special device.
    
           ENOTTY The specified request does not apply to the kind of object
                  that the file descriptor _fd_ references.
    
## CONFORMING TO         top
    
    
           No single standard.  Arguments, returns, and semantics of ioctl ()
           vary according to the device driver in question (the call is used
           as a catch-all for operations that don't cleanly fit the UNIX
           stream I/O model).
    
           The ioctl () system call appeared in Version 7 AT&T UNIX.
    
## NOTES         top
    
    
           In order to use this call, one needs an open file descriptor.
           Often the open(2) call has unwanted side effects, that can be
           avoided under Linux by giving it the O_NONBLOCK flag.
    
       ioctl structure
           Ioctl command values are 32-bit constants.  In principle these
           constants are completely arbitrary, but people have tried to
           build some structure into them.
    
           The old Linux situation was that of mostly 16-bit constants,
           where the last byte is a serial number, and the preceding byte(s)
           give a type indicating the driver.  Sometimes the major number
           was used: 0x03 for the HDIO_ ioctls, 0x06 for the LP ioctls.
           And sometimes one or more ASCII letters were used.  For example,
           TCGETS has value 0x00005401, with 0x54 = 'T' indicating the
           terminal driver, and CYGETTIMEOUT has value 0x00435906, with 0x43
           0x59 = 'C' 'Y' indicating the cyclades driver.
    
           Later (0.98p5) some more information was built into the number.
           One has 2 direction bits (00: none, 01: write, 10: read, 11:
           read/write) followed by 14 size bits (giving the size of the
           argument), followed by an 8-bit type (collecting the ioctls in
           groups for a common purpose or a common driver), and an 8-bit
           serial number.
    
           The macros describing this structure live in _< asm/ioctl.h>_ and
           are _IO(type,nr) and {_IOR,_IOW,_IOWR}(type,nr,size).  They use
           _sizeof(size)_ so that size is a misnomer here: this third argument
           is a data type.
    
           Note that the size bits are very unreliable: in lots of cases
           they are wrong, either because of buggy macros using
           _sizeof(sizeof(struct))_ , or because of legacy values.
    
           Thus, it seems that the new structure only gave disadvantages: it
           does not help in checking, but it causes varying values for the
           various architectures.
    
## SEE ALSO         top
    
    
           execve(2), fcntl(2), ioctl_console(2), ioctl_fat(2),
           ioctl_ficlonerange(2), ioctl_fideduperange(2), ioctl_fslabel(2),
           ioctl_getfsmap(2), ioctl_iflags(2), ioctl_ns(2), ioctl_tty(2),
           ioctl_userfaultfd(2), open(2), sd(4), tty(4)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                       IOCTL(2)
    
