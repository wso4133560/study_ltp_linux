  
# set_tid_address(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | CONFORMING
TO | NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    SET_TID_ADDRESS(2)      Linux Programmer's Manual     SET_TID_ADDRESS(2)
    
## NAME         top
    
    
           set_tid_address - set pointer to thread ID
    
## SYNOPSIS         top
    
    
           #include <linux/unistd.h>
    
           pid_t set_tid_address(int  _tidptr_ );
    
           _Note_ : There is no glibc wrapper for this system call; see NOTES.
    
## DESCRIPTION         top
    
    
           For each thread, the kernel maintains two attributes (addresses)
           called _set_child_tid_ and _clear_child_tid_.  These two attributes
           contain the value NULL by default.
    
           _set_child_tid_
                  If a thread is started using clone(2) with the
                  CLONE_CHILD_SETTID flag, _set_child_tid_ is set to the value
                  passed in the _ctid_ argument of that system call.
    
                  When _set_child_tid_ is set, the very first thing the new
                  thread does is to write its thread ID at this address.
    
           _clear_child_tid_
                  If a thread is started using clone(2) with the
                  CLONE_CHILD_CLEARTID flag, _clear_child_tid_ is set to the
                  value passed in the _ctid_ argument of that system call.
    
           The system call set_tid_address () sets the _clear_child_tid_ value
           for the calling thread to _tidptr_.
    
           When a thread whose _clear_child_tid_ is not NULL terminates, then,
           if the thread is sharing memory with other threads, then 0 is
           written at the address specified in _clear_child_tid_ and the
           kernel performs the following operation:
    
               futex(clear_child_tid, FUTEX_WAKE, 1, NULL, NULL, 0);
    
           The effect of this operation is to wake a single thread that is
           performing a futex wait on the memory location.  Errors from the
           futex wake operation are ignored.
    
## RETURN VALUE         top
    
    
           set_tid_address () always returns the caller's thread ID.
    
## ERRORS         top
    
    
           set_tid_address () always succeeds.
    
## VERSIONS         top
    
    
           This call is present since Linux 2.5.48.  Details as given here
           are valid since Linux 2.5.49.
    
## CONFORMING TO         top
    
    
           This system call is Linux-specific.
    
## NOTES         top
    
    
           Glibc does not provide a wrapper for this system call; call it
           using syscall(2).
    
## SEE ALSO         top
    
    
           clone(2), futex(2), gettid(2)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2020-12-21             SET_TID_ADDRESS(2)
    
