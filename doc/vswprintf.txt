  
# wprintf(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    WPRINTF(3)              Linux Programmer's Manual             WPRINTF(3)
    
## NAME         top
    
    
           wprintf, fwprintf, swprintf, vwprintf, vfwprintf, vswprintf -
           formatted wide-character output conversion
    
## SYNOPSIS         top
    
    
           #include <stdio.h>
           #include <wchar.h>
    
           int wprintf(const wchar_t restrict _format_ , ...);
           int fwprintf(FILE restrict _stream_ ,
                        const wchar_t restrict _format_ , ...);
           int swprintf(wchar_t restrict _wcs_ , size_t _maxlen_ ,
                        const wchar_t restrict _format_ , ...);
    
           int vwprintf(const wchar_t restrict _format_ , va_list _args_ );
           int vfwprintf(FILE restrict _stream_ ,
                        const wchar_t restrict _format_ , va_list _args_ );
           int vswprintf(wchar_t restrict _wcs_ , size_t _maxlen_ ,
                        const wchar_t restrict _format_ , va_list _args_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           All functions shown above:
               _XOPEN_SOURCE >= 500 || _ISOC99_SOURCE
                   || _POSIX_C_SOURCE >= 200112L
    
## DESCRIPTION         top
    
    
           The wprintf () family of functions is the wide-character
           equivalent of the printf(3) family of functions.  It performs
           formatted output of wide characters.
    
           The wprintf () and vwprintf () functions perform wide-character
           output to _stdout_.  _stdout_ must not be byte oriented; see fwide(3)
           for more information.
    
           The fwprintf () and vfwprintf () functions perform wide-character
           output to _stream_.  _stream_ must not be byte oriented; see fwide(3)
           for more information.
    
           The swprintf () and vswprintf () functions perform wide-character
           output to an array of wide characters.  The programmer must
           ensure that there is room for at least _maxlen_ wide characters at
           _wcs_.
    
           These functions are like the printf(3), vprintf(3), fprintf(3),
           vfprintf(3), sprintf(3), vsprintf(3) functions except for the
           following differences:
    
           • The _format_ string is a wide-character string.
    
           • The output consists of wide characters, not bytes.
    
           •      swprintf () and vswprintf () take a _maxlen_ argument,
                  sprintf(3) and vsprintf(3) do not.  (snprintf(3) and
                  vsnprintf(3) take a _maxlen_ argument, but these functions
                  do not return -1 upon buffer overflow on Linux.)
    
           The treatment of the conversion characters c and s is different:
    
           c If no l modifier is present, the _int_ argument is converted
                  to a wide character by a call to the btowc(3) function,
                  and the resulting wide character is written.  If an l
                  modifier is present, the _wint_t_ (wide character) argument
                  is written.
    
           s If no l modifier is present: the _const char _ argument is
                  expected to be a pointer to an array of character type
                  (pointer to a string) containing a multibyte character
                  sequence beginning in the initial shift state.  Characters
                  from the array are converted to wide characters (each by a
                  call to the mbrtowc(3) function with a conversion state
                  starting in the initial state before the first byte).  The
                  resulting wide characters are written up to (but not
                  including) the terminating null wide character (L'\0').
                  If a precision is specified, no more wide characters than
                  the number specified are written.  Note that the precision
                  determines the number of _wide characters_ written, not the
                  number of _bytes_ or _screen positions_.  The array must
                  contain a terminating null byte ('\0'), unless a precision
                  is given and it is so small that the number of converted
                  wide characters reaches it before the end of the array is
                  reached.  If an l modifier is present: the _const wchar_t _
                  argument is expected to be a pointer to an array of wide
                  characters.  Wide characters from the array are written up
                  to (but not including) a terminating null wide character.
                  If a precision is specified, no more than the number
                  specified are written.  The array must contain a
                  terminating null wide character, unless a precision is
                  given and it is smaller than or equal to the number of
                  wide characters in the array.
    
## RETURN VALUE         top
    
    
           The functions return the number of wide characters written,
           excluding the terminating null wide character in case of the
           functions swprintf () and vswprintf ().  They return -1 when an
           error occurs.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌───────────────────────────────┬───────────────┬────────────────┐
           │ Interface │ Attribute │ Value │
           ├───────────────────────────────┼───────────────┼────────────────┤
           │ wprintf (), fwprintf (),         │ Thread safety │ MT-Safe locale │
           │ swprintf (), vwprintf (),        │               │                │
           │ vfwprintf (), vswprintf ()       │               │                │
           └───────────────────────────────┴───────────────┴────────────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008, C99.
    
## NOTES         top
    
    
           The behavior of wprintf () et al. depends on the LC_CTYPE category
           of the current locale.
    
           If the _format_ string contains non-ASCII wide characters, the
           program will work correctly only if the LC_CTYPE category of the
           current locale at run time is the same as the LC_CTYPE category
           of the current locale at compile time.  This is because the
           _wchar_t_ representation is platform- and locale-dependent.  (The
           glibc represents wide characters using their Unicode (ISO-10646)
           code point, but other platforms don't do this.  Also, the use of
           C99 universal character names of the form \unnnn does not solve
           this problem.)  Therefore, in internationalized programs, the
           _format_ string should consist of ASCII wide characters only, or
           should be constructed at run time in an internationalized way
           (e.g., using gettext(3) or iconv(3), followed by mbstowcs(3)).
    
## SEE ALSO         top
    
    
           fprintf(3), fputwc(3), fwide(3), printf(3), snprintf(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                     WPRINTF(3)
    
