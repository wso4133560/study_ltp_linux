  
# scanf(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | ATTRIBUTES |
CONFORMING TO | NOTES | BUGS | EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    SCANF(3)                Linux Programmer's Manual               SCANF(3)
    
## NAME         top
    
    
           scanf, fscanf, sscanf, vscanf, vsscanf, vfscanf - input format
           conversion
    
## SYNOPSIS         top
    
    
           #include <stdio.h>
    
           int scanf(const char restrict _format_ , ...);
           int fscanf(FILE restrict _stream_ ,
                      const char restrict _format_ , ...);
           int sscanf(const char restrict _str_ ,
                      const char restrict _format_ , ...);
    
           #include <stdarg.h>
    
           int vscanf(const char restrict _format_ , va_list _ap_ );
           int vfscanf(FILE restrict _stream_ ,
                      const char restrict _format_ , va_list _ap_ );
           int vsscanf(const char restrict _str_ ,
                      const char restrict _format_ , va_list _ap_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           vscanf (), vsscanf (), vfscanf ():
               _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
    
## DESCRIPTION         top
    
    
           The scanf () family of functions scans input according to _format_
           as described below.  This format may contain _conversion_
           _specifications_ ; the results from such conversions, if any, are
           stored in the locations pointed to by the _pointer_ arguments that
           follow _format_.  Each _pointer_ argument must be of a type that is
           appropriate for the value returned by the corresponding
           conversion specification.
    
           If the number of conversion specifications in _format_ exceeds the
           number of _pointer_ arguments, the results are undefined.  If the
           number of _pointer_ arguments exceeds the number of conversion
           specifications, then the excess _pointer_ arguments are evaluated,
           but are otherwise ignored.
    
           The scanf () function reads input from the standard input stream
           _stdin_ , fscanf () reads input from the stream pointer _stream_ , and
           sscanf () reads its input from the character string pointed to by
           _str_.
    
           The vfscanf () function is analogous to vfprintf(3) and reads
           input from the stream pointer _stream_ using a variable argument
           list of pointers (see stdarg(3).  The vscanf () function scans a
           variable argument list from the standard input and the vsscanf ()
           function scans it from a string; these are analogous to the
           vprintf(3) and vsprintf(3) functions respectively.
    
           The _format_ string consists of a sequence of _directives_ which
           describe how to process the sequence of input characters.  If
           processing of a directive fails, no further input is read, and
           scanf () returns.  A "failure" can be either of the following:
           _input failure_ , meaning that input characters were unavailable, or
           _matching failure_ , meaning that the input was inappropriate (see
           below).
    
           A directive is one of the following:
    
           •      A sequence of white-space characters (space, tab, newline,
                  etc.; see isspace(3)).  This directive matches any amount
                  of white space, including none, in the input.
    
           •      An ordinary character (i.e., one other than white space or
                  '%').  This character must exactly match the next
                  character of input.
    
           •      A conversion specification, which commences with a '%'
                  (percent) character.  A sequence of characters from the
                  input is converted according to this specification, and
                  the result is placed in the corresponding _pointer_
                  argument.  If the next item of input does not match the
                  conversion specification, the conversion fails—this is a
                  _matching failure_.
    
           Each _conversion specification_ in _format_ begins with either the
           character '%' or the character sequence " % _n_ $ " (see below for the
           distinction) followed by:
    
           •      An optional '' assignment-suppression character: scanf ()
                  reads input as directed by the conversion specification,
                  but discards the input.  No corresponding _pointer_ argument
                  is required, and this specification is not included in the
                  count of successful assignments returned by scanf ().
    
           •      For decimal conversions, an optional quote character (').
                  This specifies that the input number may include
                  thousands' separators as defined by the LC_NUMERIC
                  category of the current locale.  (See setlocale(3).)  The
                  quote character may precede or follow the '' assignment-
                  suppression character.
    
           •      An optional 'm' character.  This is used with string
                  conversions ( _%s_ , _%c_ , _%[_ ), and relieves the caller of the
                  need to allocate a corresponding buffer to hold the input:
                  instead, scanf () allocates a buffer of sufficient size,
                  and assigns the address of this buffer to the
                  corresponding _pointer_ argument, which should be a pointer
                  to a _char _ variable (this variable does not need to be
                  initialized before the call).  The caller should
                  subsequently free(3) this buffer when it is no longer
                  required.
    
           •      An optional decimal integer which specifies the _maximum_
                  _field width_.  Reading of characters stops either when this
                  maximum is reached or when a nonmatching character is
                  found, whichever happens first.  Most conversions discard
                  initial white space characters (the exceptions are noted
                  below), and these discarded characters don't count toward
                  the maximum field width.  String input conversions store a
                  terminating null byte ('\0') to mark the end of the input;
                  the maximum field width does not include this terminator.
    
           •      An optional _type modifier character_.  For example, the l
                  type modifier is used with integer conversions such as %d
                  to specify that the corresponding _pointer_ argument refers
                  to a _long_ rather than a pointer to an _int_.
    
           •      A _conversion specifier_ that specifies the type of input
                  conversion to be performed.
    
           The conversion specifications in _format_ are of two forms, either
           beginning with '%' or beginning with " % _n_ $ ".  The two forms should
           not be mixed in the same _format_ string, except that a string
           containing " % _n_ $ " specifications can include %% and %.  If _format_
           contains '%' specifications, then these correspond in order with
           successive _pointer_ arguments.  In the " % _n_ $ " form (which is
           specified in POSIX.1-2001, but not C99), _n_ is a decimal integer
           that specifies that the converted input should be placed in the
           location referred to by the _n_ -th _pointer_ argument following
           _format_.
    
       Conversions
           The following _type modifier characters_ can appear in a conversion
           specification:
    
           h Indicates that the conversion will be one of d , i , o , u ,
                  x , X , or n and the next pointer is a pointer to a _short_ or
                  _unsigned short_ (rather than _int_ ).
    
           hh As for h , but the next pointer is a pointer to a _signed_
                  _char_ or _unsigned char_.
    
           j As for h , but the next pointer is a pointer to an _intmax_t_
                  or a _uintmax_t_.  This modifier was introduced in C99.
    
           l Indicates either that the conversion will be one of d , i ,
                  o , u , x , X , or n and the next pointer is a pointer to a
                  _long_ or _unsigned long_ (rather than _int_ ), or that the
                  conversion will be one of e , f , or g and the next pointer
                  is a pointer to _double_ (rather than _float_ ).  Specifying
                  two l characters is equivalent to L.  If used with %c or
                  %s , the corresponding parameter is considered as a pointer
                  to a wide character or wide-character string respectively.
    
           L Indicates that the conversion will be either e , f , or g
                  and the next pointer is a pointer to _long double_ or the
                  conversion will be d , i , o , u , or x and the next pointer
                  is a pointer to _long long_.
    
           q equivalent to L.  This specifier does not exist in ANSI C.
    
           t As for h , but the next pointer is a pointer to a
                  _ptrdiff_t_.  This modifier was introduced in C99.
    
           z As for h , but the next pointer is a pointer to a _size_t_.
                  This modifier was introduced in C99.
    
           The following _conversion specifiers_ are available:
    
           % Matches a literal '%'.  That is, %% in the format string
                  matches a single input '%' character.  No conversion is
                  done (but initial white space characters are discarded),
                  and assignment does not occur.
    
           d Matches an optionally signed decimal integer; the next
                  pointer must be a pointer to _int_.
    
           i Matches an optionally signed integer; the next pointer
                  must be a pointer to _int_.  The integer is read in base 16
                  if it begins with _0x_ or _0X_ , in base 8 if it begins with _0_ ,
                  and in base 10 otherwise.  Only characters that correspond
                  to the base are used.
    
           o Matches an unsigned octal integer; the next pointer must
                  be a pointer to _unsigned int_.
    
           u Matches an unsigned decimal integer; the next pointer must
                  be a pointer to _unsigned int_.
    
           x Matches an unsigned hexadecimal integer (that may
                  optionally begin with a prefix of _0x_ or _0X_ , which is
                  discarded); the next pointer must be a pointer to _unsigned_
                  _int_.
    
           X Equivalent to x.
    
           f Matches an optionally signed floating-point number; the
                  next pointer must be a pointer to _float_.
    
           e Equivalent to f.
    
           g Equivalent to f.
    
           E Equivalent to f.
    
           a (C99) Equivalent to f.
    
           s Matches a sequence of non-white-space characters; the next
                  pointer must be a pointer to the initial element of a
                  character array that is long enough to hold the input
                  sequence and the terminating null byte ('\0'), which is
                  added automatically.  The input string stops at white
                  space or at the maximum field width, whichever occurs
                  first.
    
           c Matches a sequence of characters whose length is specified
                  by the _maximum field width_ (default 1); the next pointer
                  must be a pointer to _char_ , and there must be enough room
                  for all the characters (no terminating null byte is
                  added).  The usual skip of leading white space is
                  suppressed.  To skip white space first, use an explicit
                  space in the format.
    
           [ Matches a nonempty sequence of characters from the
                  specified set of accepted characters; the next pointer
                  must be a pointer to _char_ , and there must be enough room
                  for all the characters in the string, plus a terminating
                  null byte.  The usual skip of leading white space is
                  suppressed.  The string is to be made up of characters in
                  (or not in) a particular set; the set is defined by the
                  characters between the open bracket [ character and a
                  close bracket ] character.  The set _excludes_ those
                  characters if the first character after the open bracket
                  is a circumflex ( ^ ).  To include a close bracket in the
                  set, make it the first character after the open bracket or
                  the circumflex; any other position will end the set.  The
                  hyphen character - is also special; when placed between
                  two other characters, it adds all intervening characters
                  to the set.  To include a hyphen, make it the last
                  character before the final close bracket.  For instance,
                  [^]0-9-] means the set "everything except close bracket,
                  zero through nine, and hyphen".  The string ends with the
                  appearance of a character not in the (or, with a
                  circumflex, in) set or when the field width runs out.
    
           p Matches a pointer value (as printed by %p in printf(3));
                  the next pointer must be a pointer to a pointer to _void_.
    
           n Nothing is expected; instead, the number of characters
                  consumed thus far from the input is stored through the
                  next pointer, which must be a pointer to _int_.  This is _not_
                  a conversion and does _not_ increase the count returned by
                  the function.  The assignment can be suppressed with the 
                  assignment-suppression character, but the effect on the
                  return value is undefined.  Therefore %n conversions
                  should not be used.
    
## RETURN VALUE         top
    
    
           On success, these functions return the number of input items
           successfully matched and assigned; this can be fewer than
           provided for, or even zero, in the event of an early matching
           failure.
    
           The value EOF is returned if the end of input is reached before
           either the first successful conversion or a matching failure
           occurs.  EOF is also returned if a read error occurs, in which
           case the error indicator for the stream (see ferror(3)) is set,
           and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EAGAIN The file descriptor underlying _stream_ is marked
                  nonblocking, and the read operation would block.
    
           EBADF The file descriptor underlying _stream_ is invalid, or not
                  open for reading.
    
           EILSEQ Input byte sequence does not form a valid character.
    
           EINTR The read operation was interrupted by a signal; see
                  signal(7).
    
           EINVAL Not enough arguments; or _format_ is NULL.
    
           ENOMEM Out of memory.
    
           ERANGE The result of an integer conversion would exceed the size
                  that can be stored in the corresponding integer type.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌───────────────────────────────┬───────────────┬────────────────┐
           │ Interface │ Attribute │ Value │
           ├───────────────────────────────┼───────────────┼────────────────┤
           │ scanf (), fscanf (), sscanf (),   │ Thread safety │ MT-Safe locale │
           │ vscanf (), vsscanf (), vfscanf () │               │                │
           └───────────────────────────────┴───────────────┴────────────────┘
    
## CONFORMING TO         top
    
    
           The functions fscanf (), scanf (), and sscanf () conform to C89 and
           C99 and POSIX.1-2001.  These standards do not specify the ERANGE
           error.
    
           The q specifier is the 4.4BSD notation for _long long_ , while ll or
           the usage of L in integer conversions is the GNU notation.
    
           The Linux version of these functions is based on the _GNU libio_
           library.  Take a look at the _info_ documentation of _GNU libc_
           _(glibc-1.08)_ for a more concise description.
    
## NOTES         top
    
    
       The 'a' assignment-allocation modifier
           Originally, the GNU C library supported dynamic allocation for
           string inputs (as a nonstandard extension) via the a character.
           (This feature is present at least as far back as glibc 2.0.)
           Thus, one could write the following to have scanf () allocate a
           buffer for an input string, with a pointer to that buffer being
           returned in _buf_ :
    
               char buf;
               scanf("%as", &buf);
    
           The use of the letter a for this purpose was problematic, since a
           is also specified by the ISO C standard as a synonym for f
           (floating-point input).  POSIX.1-2008 instead specifies the m
           modifier for assignment allocation (as documented in DESCRIPTION,
           above).
    
           Note that the a modifier is not available if the program is
           compiled with _gcc -std=c99_ or _gcc -D_ISOC99_SOURCE_ (unless
           _GNU_SOURCE is also specified), in which case the a is
           interpreted as a specifier for floating-point numbers (see
           above).
    
           Support for the m modifier was added to glibc starting with
           version 2.7, and new programs should use that modifier instead of
           a.
    
           As well as being standardized by POSIX, the m modifier has the
           following further advantages over the use of a:
    
            It may also be applied to %c conversion specifiers (e.g.,
             %3mc ).
    
            It avoids ambiguity with respect to the %a floating-point
             conversion specifier (and is unaffected by _gcc -std=c99_ etc.).
    
## BUGS         top
    
    
           All functions are fully C89 conformant, but provide the
           additional specifiers q and a as well as an additional behavior
           of the L and l specifiers.  The latter may be considered to be a
           bug, as it changes the behavior of specifiers defined in C89.
    
           Some combinations of the type modifiers and conversion specifiers
           defined by ANSI C do not make sense (e.g., %Ld ).  While they may
           have a well-defined behavior on Linux, this need not to be so on
           other architectures.  Therefore it usually is better to use
           modifiers that are not defined by ANSI C at all, that is, use q
           instead of L in combination with d , i , o , u , x , and X conversions
           or ll.
    
           The usage of q is not the same as on 4.4BSD, as it may be used in
           float conversions equivalently to L.
    
## EXAMPLES         top
    
    
           To use the dynamic allocation conversion specifier, specify m as
           a length modifier (thus %ms or %m[ _range_ ] ).  The caller must
           free(3) the returned string, as in the following example:
    
               char p;
               int n;
    
               errno = 0;
               n = scanf("%m[a-z]", &p);
               if (n == 1) {
                   printf("read: %s\n", p);
                   free(p);
               } else if (errno != 0) {
                   perror("scanf");
               } else {
                   fprintf(stderr, "No matching characters\n");
               }
    
           As shown in the above example, it is necessary to call free(3)
           only if the scanf () call successfully read a string.
    
## SEE ALSO         top
    
    
           getc(3), printf(3), setlocale(3), strtod(3), strtol(3),
           strtoul(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                       SCANF(3)
    
