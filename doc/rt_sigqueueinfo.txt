  
# rt_sigqueueinfo(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | CONFORMING
TO | NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    RT_SIGQUEUEINFO(2)      Linux Programmer's Manual     RT_SIGQUEUEINFO(2)
    
## NAME         top
    
    
           rt_sigqueueinfo, rt_tgsigqueueinfo - queue a signal and data
    
## SYNOPSIS         top
    
    
           int rt_sigqueueinfo(pid_t _tgid_ , int _sig_ , siginfo_t  _info_ );
           int rt_tgsigqueueinfo(pid_t _tgid_ , pid_t _tid_ , int _sig_ , siginfo_t  _info_ );
    
           _Note_ : There are no glibc wrappers for these system calls; see
           NOTES.
    
## DESCRIPTION         top
    
    
           The rt_sigqueueinfo () and rt_tgsigqueueinfo () system calls are
           the low-level interfaces used to send a signal plus data to a
           process or thread.  The receiver of the signal can obtain the
           accompanying data by establishing a signal handler with the
           sigaction(2) SA_SIGINFO flag.
    
           These system calls are not intended for direct application use;
           they are provided to allow the implementation of sigqueue(3) and
           pthread_sigqueue(3).
    
           The rt_sigqueueinfo () system call sends the signal _sig_ to the
           thread group with the ID _tgid_.  (The term "thread group" is
           synonymous with "process", and _tid_ corresponds to the traditional
           UNIX process ID.)  The signal will be delivered to an arbitrary
           member of the thread group (i.e., one of the threads that is not
           currently blocking the signal).
    
           The _info_ argument specifies the data to accompany the signal.
           This argument is a pointer to a structure of type _siginfo_t_ ,
           described in sigaction(2) (and defined by including
           _< sigaction.h>_).  The caller should set the following fields in
           this structure:
    
           _si_code_
                  This should be one of the SI_ codes in the Linux kernel
                  source file _include/asm-generic/siginfo.h_.  If the signal
                  is being sent to any process other than the caller itself,
                  the following restrictions apply:
    
                    The code can't be a value greater than or equal to
                     zero.  In particular, it can't be SI_USER , which is
                     used by the kernel to indicate a signal sent by
                     kill(2), and nor can it be SI_KERNEL , which is used to
                     indicate a signal generated by the kernel.
    
                    The code can't (since Linux 2.6.39) be SI_TKILL , which
                     is used by the kernel to indicate a signal sent using
                     tgkill(2).
    
           _si_pid_ This should be set to a process ID, typically the process
                  ID of the sender.
    
           _si_uid_ This should be set to a user ID, typically the real user
                  ID of the sender.
    
           _si_value_
                  This field contains the user data to accompany the signal.
                  For more information, see the description of the last
                  ( _union sigval_ ) argument of sigqueue(3).
    
           Internally, the kernel sets the _si_signo_ field to the value
           specified in _sig_ , so that the receiver of the signal can also
           obtain the signal number via that field.
    
           The rt_tgsigqueueinfo () system call is like rt_sigqueueinfo (),
           but sends the signal and data to the single thread specified by
           the combination of _tgid_ , a thread group ID, and _tid_ , a thread in
           that thread group.
    
## RETURN VALUE         top
    
    
           On success, these system calls return 0.  On error, they return
           -1 and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EAGAIN The limit of signals which may be queued has been reached.
                  (See signal(7) for further information.)
    
           EINVAL _sig_ , _tgid_ , or _tid_ was invalid.
    
           EPERM The caller does not have permission to send the signal to
                  the target.  For the required permissions, see kill(2).
    
           EPERM _tgid_ specifies a process other than the caller and
                  _info- >si_code_ is invalid.
    
           ESRCH  rt_sigqueueinfo (): No thread group matching _tgid_ was
                  found.
    
           rt_tgsigqueinfo (): No thread matching _tgid_ and _tid_ was found.
    
## VERSIONS         top
    
    
           The rt_sigqueueinfo () system call was added to Linux in version
           2.2.  The rt_tgsigqueueinfo () system call was added to Linux in
           version 2.6.31.
    
## CONFORMING TO         top
    
    
           These system calls are Linux-specific.
    
## NOTES         top
    
    
           Since these system calls are not intended for application use,
           there are no glibc wrapper functions; use syscall(2) in the
           unlikely case that you want to call them directly.
    
           As with kill(2), the null signal (0) can be used to check if the
           specified process or thread exists.
    
## SEE ALSO         top
    
    
           kill(2), pidfd_send_signal(2), sigaction(2), sigprocmask(2),
           tgkill(2), pthread_sigqueue(3), sigqueue(3), signal(7)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22             RT_SIGQUEUEINFO(2)
    
