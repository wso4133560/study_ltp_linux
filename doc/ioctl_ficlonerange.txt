  
# ioctl_ficlonerange(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | CONFORMING
TO | NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    IOCTL_FICLONERANGE(2)   Linux Programmer's Manual  IOCTL_FICLONERANGE(2)
    
## NAME         top
    
    
           ioctl_ficlonerange, ioctl_ficlone - share some the data of one
           file with another file
    
## SYNOPSIS         top
    
    
           #include <sys/ioctl.h>
           #include <linux/fs.h>
    
           int ioctl(int _dest_fd_ , FICLONERANGE, struct file_clone_range  _arg_ );
           int ioctl(int _dest_fd_ , FICLONE, int _src_fd_ );
    
## DESCRIPTION         top
    
    
           If a filesystem supports files sharing physical storage between
           multiple files ("reflink"), this ioctl(2) operation can be used
           to make some of the data in the _src_fd_ file appear in the _dest_fd_
           file by sharing the underlying storage, which is faster than
           making a separate physical copy of the data.  Both files must
           reside within the same filesystem.  If a file write should occur
           to a shared region, the filesystem must ensure that the changes
           remain private to the file being written.  This behavior is
           commonly referred to as "copy on write".
    
           This ioctl reflinks up to _src_length_ bytes from file descriptor
           _src_fd_ at offset _src_offset_ into the file _dest_fd_ at offset
           _dest_offset_ , provided that both are files.  If _src_length_ is
           zero, the ioctl reflinks to the end of the source file.  This
           information is conveyed in a structure of the following form:
    
               struct file_clone_range {
                   __s64 src_fd;
                   __u64 src_offset;
                   __u64 src_length;
                   __u64 dest_offset;
               };
    
           Clones are atomic with regards to concurrent writes, so no locks
           need to be taken to obtain a consistent cloned copy.
    
           The FICLONE ioctl clones entire files.
    
## RETURN VALUE         top
    
    
           On error, -1 is returned, and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           Error codes can be one of, but are not limited to, the following:
    
           EBADF _src_fd_ is not open for reading; _dest_fd_ is not open for
                  writing or is open for append-only writes; or the
                  filesystem which _src_fd_ resides on does not support
                  reflink.
    
           EINVAL The filesystem does not support reflinking the ranges of
                  the given files.  This error can also appear if either
                  file descriptor represents a device, FIFO, or socket.
                  Disk filesystems generally require the offset and length
                  arguments to be aligned to the fundamental block size.
                  XFS and Btrfs do not support overlapping reflink ranges in
                  the same file.
    
           EISDIR One of the files is a directory and the filesystem does
                  not support shared regions in directories.
    
           EOPNOTSUPP
                  This can appear if the filesystem does not support
                  reflinking either file descriptor, or if either file
                  descriptor refers to special inodes.
    
           EPERM _dest_fd_ is immutable.
    
           ETXTBSY
                  One of the files is a swap file.  Swap files cannot share
                  storage.
    
           EXDEV _dest_fd_ and _src_fd_ are not on the same mounted filesystem.
    
## VERSIONS         top
    
    
           These ioctl operations first appeared in Linux 4.5.  They were
           previously known as BTRFS_IOC_CLONE and BTRFS_IOC_CLONE_RANGE ,
           and were private to Btrfs.
    
## CONFORMING TO         top
    
    
           This API is Linux-specific.
    
## NOTES         top
    
    
           Because a copy-on-write operation requires the allocation of new
           storage, the fallocate(2) operation may unshare shared blocks to
           guarantee that subsequent writes will not fail because of lack of
           disk space.
    
## SEE ALSO         top
    
    
           ioctl(2)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22          IOCTL_FICLONERANGE(2)
    
