  
# mkfifo(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | ATTRIBUTES
| CONFORMING TO | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    MKFIFO(3)               Linux Programmer's Manual              MKFIFO(3)
    
## NAME         top
    
    
           mkfifo, mkfifoat - make a FIFO special file (a named pipe)
    
## SYNOPSIS         top
    
    
           #include <sys/types.h>
           #include <sys/stat.h>
    
           int mkfifo(const char  _pathname_ , mode_t _mode_ );
    
           #include <fcntl.h>           / Definition of AT_ constants /
           #include <sys/stat.h>
    
           int mkfifoat(int _dirfd_ , const char  _pathname_ , mode_t _mode_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           mkfifoat ():
               Since glibc 2.10:
                   _POSIX_C_SOURCE >= 200809L
               Before glibc 2.10:
                   _ATFILE_SOURCE
    
## DESCRIPTION         top
    
    
           mkfifo () makes a FIFO special file with name _pathname_.  _mode_
           specifies the FIFO's permissions.  It is modified by the
           process's umask in the usual way: the permissions of the created
           file are ( _mode_ & ~umask).
    
           A FIFO special file is similar to a pipe, except that it is
           created in a different way.  Instead of being an anonymous
           communications channel, a FIFO special file is entered into the
           filesystem by calling mkfifo ().
    
           Once you have created a FIFO special file in this way, any
           process can open it for reading or writing, in the same way as an
           ordinary file.  However, it has to be open at both ends
           simultaneously before you can proceed to do any input or output
           operations on it.  Opening a FIFO for reading normally blocks
           until some other process opens the same FIFO for writing, and
           vice versa.  See fifo(7) for nonblocking handling of FIFO special
           files.
    
       mkfifoat()
           The mkfifoat () function operates in exactly the same way as
           mkfifo (), except for the differences described here.
    
           If the pathname given in _pathname_ is relative, then it is
           interpreted relative to the directory referred to by the file
           descriptor _dirfd_ (rather than relative to the current working
           directory of the calling process, as is done by mkfifo () for a
           relative pathname).
    
           If _pathname_ is relative and _dirfd_ is the special value AT_FDCWD ,
           then _pathname_ is interpreted relative to the current working
           directory of the calling process (like mkfifo ()).
    
           If _pathname_ is absolute, then _dirfd_ is ignored.
    
## RETURN VALUE         top
    
    
           On success mkfifo () and mkfifoat () return 0.  On error, -1 is
           returned and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EACCES One of the directories in _pathname_ did not allow search
                  (execute) permission.
    
           EDQUOT The user's quota of disk blocks or inodes on the
                  filesystem has been exhausted.
    
           EEXIST _pathname_ already exists.  This includes the case where
                  _pathname_ is a symbolic link, dangling or not.
    
           ENAMETOOLONG
                  Either the total length of _pathname_ is greater than
                  PATH_MAX , or an individual filename component has a length
                  greater than NAME_MAX.  In the GNU system, there is no
                  imposed limit on overall filename length, but some
                  filesystems may place limits on the length of a component.
    
           ENOENT A directory component in _pathname_ does not exist or is a
                  dangling symbolic link.
    
           ENOSPC The directory or filesystem has no room for the new file.
    
           ENOTDIR
                  A component used as a directory in _pathname_ is not, in
                  fact, a directory.
    
           EROFS _pathname_ refers to a read-only filesystem.
    
           The following additional errors can occur for mkfifoat ():
    
           EBADF _dirfd_ is not a valid file descriptor.
    
           ENOTDIR
                  _pathname_ is a relative path and _dirfd_ is a file descriptor
                  referring to a file other than a directory.
    
## VERSIONS         top
    
    
           mkfifoat () was added to glibc in version 2.4.  It is implemented
           using mknodat(2), available on Linux since kernel 2.6.16.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ mkfifo (), mkfifoat ()                  │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           mkfifo (): POSIX.1-2001, POSIX.1-2008.
    
           mkfifoat (): POSIX.1-2008.
    
## SEE ALSO         top
    
    
           mkfifo(1), close(2), open(2), read(2), stat(2), umask(2),
           write(2), fifo(7)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                      MKFIFO(3)
    
