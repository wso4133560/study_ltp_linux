  
# strverscmp(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    STRVERSCMP(3)           Linux Programmer's Manual          STRVERSCMP(3)
    
## NAME         top
    
    
           strverscmp - compare two version strings
    
## SYNOPSIS         top
    
    
           #define _GNU_SOURCE / See feature_test_macros(7) /
           #include <string.h>
    
           int strverscmp(const char  _s1_ , const char  _s2_ );
    
## DESCRIPTION         top
    
    
           Often one has files _jan1_ , _jan2_ , ..., _jan9_ , _jan10_ , ...  and it
           feels wrong when ls(1) orders them _jan1_ , _jan10_ , ..., _jan2_ , ...,
           _jan9_.  In order to rectify this, GNU introduced the _-v_ option to
           ls(1), which is implemented using versionsort(3), which again
           uses strverscmp ().
    
           Thus, the task of strverscmp () is to compare two strings and find
           the "right" order, while strcmp(3) finds only the lexicographic
           order.  This function does not use the locale category
           LC_COLLATE , so is meant mostly for situations where the strings
           are expected to be in ASCII.
    
           What this function does is the following.  If both strings are
           equal, return 0.  Otherwise, find the position between two bytes
           with the property that before it both strings are equal, while
           directly after it there is a difference.  Find the largest
           consecutive digit strings containing (or starting at, or ending
           at) this position.  If one or both of these is empty, then return
           what strcmp(3) would have returned (numerical ordering of byte
           values).  Otherwise, compare both digit strings numerically,
           where digit strings with one or more leading zeros are
           interpreted as if they have a decimal point in front (so that in
           particular digit strings with more leading zeros come before
           digit strings with fewer leading zeros).  Thus, the ordering is
           _000_ , _00_ , _01_ , _010_ , _09_ , _0_ , _1_ , _9_ , _10_.
    
## RETURN VALUE         top
    
    
           The strverscmp () function returns an integer less than, equal to,
           or greater than zero if _s1_ is found, respectively, to be earlier
           than, equal to, or later than _s2_.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ strverscmp ()                          │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           This function is a GNU extension.
    
## EXAMPLES         top
    
    
           The program below can be used to demonstrate the behavior of
           strverscmp ().  It uses strverscmp () to compare the two strings
           given as its command-line arguments.  An example of its use is
           the following:
    
               $ ./a.out jan1 jan10
               jan1 < jan10
    
       Program source
    
           #define _GNU_SOURCE
           #include <string.h>
           #include <stdio.h>
           #include <stdlib.h>
    
           int
           main(int argc, char argv[])
           {
               int res;
    
               if (argc != 3) {
                   fprintf(stderr, "Usage: %s <string1> <string2>\n", argv[0]);
                   exit(EXIT_FAILURE);
               }
    
               res = strverscmp(argv[1], argv[2]);
    
               printf("%s %s %s\n", argv[1],
                       (res < 0) ? "<" : (res == 0) ? "==" : ">", argv[2]);
    
               exit(EXIT_SUCCESS);
           }
    
## SEE ALSO         top
    
    
           rename(1), strcasecmp(3), strcmp(3), strcoll(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                  STRVERSCMP(3)
    
