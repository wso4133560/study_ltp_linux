  
# ecvt(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    ECVT(3)                 Linux Programmer's Manual                ECVT(3)
    
## NAME         top
    
    
           ecvt, fcvt - convert a floating-point number to a string
    
## SYNOPSIS         top
    
    
           #include <stdlib.h>
    
           char ecvt(double _number_ , int _ndigits_ , int restrict _decpt_ ,
                      int restrict _sign_ );
           char fcvt(double _number_ , int _ndigits_ , int restrict _decpt_ ,
                      int restrict _sign_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           ecvt (), fcvt ():
               Since glibc 2.17
                   (_XOPEN_SOURCE >= 500 && ! (_POSIX_C_SOURCE >= 200809L))
                       || / Glibc >= 2.20 / _DEFAULT_SOURCE
                       || / Glibc <= 2.19 / _SVID_SOURCE
               Glibc versions 2.12 to 2.16:
                   (_XOPEN_SOURCE >= 500 && ! (_POSIX_C_SOURCE >= 200112L))
                       || _SVID_SOURCE
               Before glibc 2.12:
                   _SVID_SOURCE || _XOPEN_SOURCE >= 500
    
## DESCRIPTION         top
    
    
           The ecvt () function converts _number_ to a null-terminated string
           of _ndigits_ digits (where _ndigits_ is reduced to a system-specific
           limit determined by the precision of a _double_ ), and returns a
           pointer to the string.  The high-order digit is nonzero, unless
           _number_ is zero.  The low order digit is rounded.  The string
           itself does not contain a decimal point; however, the position of
           the decimal point relative to the start of the string is stored
           in _decpt_.  A negative value for _decpt_ means that the decimal
           point is to the left of the start of the string.  If the sign of
           _number_ is negative, _sign_ is set to a nonzero value, otherwise it
           is set to 0.  If _number_ is zero, it is unspecified whether _decpt_
           is 0 or 1.
    
           The fcvt () function is identical to ecvt (), except that _ndigits_
           specifies the number of digits after the decimal point.
    
## RETURN VALUE         top
    
    
           Both the ecvt () and fcvt () functions return a pointer to a static
           string containing the ASCII representation of _number_.  The static
           string is overwritten by each call to ecvt () or fcvt ().
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────┬───────────────┬─────────────────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────┼───────────────┼─────────────────────┤
           │ ecvt ()                    │ Thread safety │ MT-Unsafe race:ecvt │
           ├──────────────────────────┼───────────────┼─────────────────────┤
           │ fcvt ()                    │ Thread safety │ MT-Unsafe race:fcvt │
           └──────────────────────────┴───────────────┴─────────────────────┘
    
## CONFORMING TO         top
    
    
           SVr2; marked as LEGACY in POSIX.1-2001.  POSIX.1-2008 removes the
           specifications of ecvt () and fcvt (), recommending the use of
           sprintf(3) instead (though snprintf(3) may be preferable).
    
## NOTES         top
    
    
           Not all locales use a point as the radix character ("decimal
           point").
    
## SEE ALSO         top
    
    
           ecvt_r(3), gcvt(3), qecvt(3), setlocale(3), sprintf(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
                                   2021-03-22                        ECVT(3)
    
