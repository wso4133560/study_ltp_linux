  
# setbuf(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
NOTES | BUGS | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    SETBUF(3)               Linux Programmer's Manual              SETBUF(3)
    
## NAME         top
    
    
           setbuf, setbuffer, setlinebuf, setvbuf - stream buffering
           operations
    
## SYNOPSIS         top
    
    
           #include <stdio.h>
    
           int setvbuf(FILE restrict _stream_ , char restrict _buf_ ,
                       int _mode_ , size_t _size_ );
    
           void setbuf(FILE restrict _stream_ , char restrict _buf_ );
           void setbuffer(FILE restrict _stream_ , char restrict _buf_ ,
                       size_t _size_ );
           void setlinebuf(FILE  _stream_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           setbuffer (), setlinebuf ():
               Since glibc 2.19:
                   _DEFAULT_SOURCE
               Glibc 2.19 and earlier:
                   _BSD_SOURCE
    
## DESCRIPTION         top
    
    
           The three types of buffering available are unbuffered, block
           buffered, and line buffered.  When an output stream is
           unbuffered, information appears on the destination file or
           terminal as soon as written; when it is block buffered, many
           characters are saved up and written as a block; when it is line
           buffered, characters are saved up until a newline is output or
           input is read from any stream attached to a terminal device
           (typically _stdin_ ).  The function fflush(3) may be used to force
           the block out early.  (See fclose(3).)
    
           Normally all files are block buffered.  If a stream refers to a
           terminal (as _stdout_ normally does), it is line buffered.  The
           standard error stream _stderr_ is always unbuffered by default.
    
           The setvbuf () function may be used on any open stream to change
           its buffer.  The _mode_ argument must be one of the following three
           macros:
    
                  _IONBF unbuffered
    
                  _IOLBF line buffered
    
                  _IOFBF fully buffered
    
           Except for unbuffered files, the _buf_ argument should point to a
           buffer at least _size_ bytes long; this buffer will be used instead
           of the current buffer.  If the argument _buf_ is NULL, only the
           mode is affected; a new buffer will be allocated on the next read
           or write operation.  The setvbuf () function may be used only
           after opening a stream and before any other operations have been
           performed on it.
    
           The other three calls are, in effect, simply aliases for calls to
           setvbuf ().  The setbuf () function is exactly equivalent to the
           call
    
               setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);
    
           The setbuffer () function is the same, except that the size of the
           buffer is up to the caller, rather than being determined by the
           default BUFSIZ.  The setlinebuf () function is exactly equivalent
           to the call:
    
               setvbuf(stream, NULL, _IOLBF, 0);
    
## RETURN VALUE         top
    
    
           The function setvbuf () returns 0 on success.  It returns nonzero
           on failure ( _mode_ is invalid or the request cannot be honored).
           It may set _errno_ on failure.
    
           The other functions do not return a value.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ setbuf (), setbuffer (), setlinebuf (),  │ Thread safety │ MT-Safe │
           │ setvbuf ()                             │               │         │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           The setbuf () and setvbuf () functions conform to C89 and C99.
    
## NOTES         top
    
    
           POSIX notes that the value of _errno_ is unspecified after a call
           to setbuf () and further notes that, since the value of _errno_ is
           not required to be unchanged after a successful call to setbuf (),
           applications should instead use setvbuf () in order to detect
           errors.
    
## BUGS         top
    
    
           You must make sure that the space that _buf_ points to still exists
           by the time _stream_ is closed, which also happens at program
           termination.  For example, the following is invalid:
    
           #include <stdio.h>
    
           int
           main(void)
           {
               char buf[BUFSIZ];
               setbuf(stdin, buf);
               printf("Hello, world!\n");
               return 0;
           }
    
## SEE ALSO         top
    
    
           stdbuf(1), fclose(3), fflush(3), fopen(3), fread(3), malloc(3),
           printf(3), puts(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                      SETBUF(3)
    
