  
# strcat(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
NOTES | EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    STRCAT(3)               Linux Programmer's Manual              STRCAT(3)
    
## NAME         top
    
    
           strcat, strncat - concatenate two strings
    
## SYNOPSIS         top
    
    
           #include <string.h>
    
           char strcat(char restrict _dest_ , const char restrict _src_ );
           char strncat(char restrict _dest_ , const char restrict _src_ , size_t _n_ );
    
## DESCRIPTION         top
    
    
           The strcat () function appends the _src_ string to the _dest_ string,
           overwriting the terminating null byte ('\0') at the end of _dest_ ,
           and then adds a terminating null byte.  The strings may not
           overlap, and the _dest_ string must have enough space for the
           result.  If _dest_ is not large enough, program behavior is
           unpredictable; _buffer overruns are a favorite avenue for_
           _attacking secure programs_.
    
           The strncat () function is similar, except that
    
             it will use at most _n_ bytes from _src_ ; and
    
             _src_ does not need to be null-terminated if it contains _n_ or
              more bytes.
    
           As with strcat (), the resulting string in _dest_ is always null-
           terminated.
    
           If _src_ contains _n_ or more bytes, strncat () writes _n+1_ bytes to
           _dest_ ( _n_ from _src_ plus the terminating null byte).  Therefore, the
           size of _dest_ must be at least _strlen(dest)+n+1_.
    
           A simple implementation of strncat () might be:
    
               char 
               strncat(char dest, const char src, size_t n)
               {
                   size_t dest_len = strlen(dest);
                   size_t i;
    
                   for (i = 0 ; i < n && src[i] != '\0' ; i++)
                       dest[dest_len + i] = src[i];
                   dest[dest_len + i] = '\0';
    
                   return dest;
               }
    
## RETURN VALUE         top
    
    
           The strcat () and strncat () functions return a pointer to the
           resulting string _dest_.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ strcat (), strncat ()                   │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.
    
## NOTES         top
    
    
           Some systems (the BSDs, Solaris, and others) provide the
           following function:
    
               size_t strlcat(char dest, const char src, size_t size);
    
           This function appends the null-terminated string _src_ to the
           string _dest_ , copying at most _size-strlen(dest)-1_ from _src_ , and
           adds a terminating null byte to the result, _unless size_ is less
           than _strlen(dest)_.  This function fixes the buffer overrun
           problem of strcat (), but the caller must still handle the
           possibility of data loss if _size_ is too small.  The function
           returns the length of the string strlcat () tried to create; if
           the return value is greater than or equal to _size_ , data loss
           occurred.  If data loss matters, the caller _must_ either check the
           arguments before the call, or test the function return value.
           strlcat () is not present in glibc and is not standardized by
           POSIX, but is available on Linux via the _libbsd_ library.
    
## EXAMPLES         top
    
    
           Because strcat () and strncat () must find the null byte that
           terminates the string _dest_ using a search that starts at the
           beginning of the string, the execution time of these functions
           scales according to the length of the string _dest_.  This can be
           demonstrated by running the program below.  (If the goal is to
           concatenate many strings to one target, then manually copying the
           bytes from each source string while maintaining a pointer to the
           end of the target string will provide better performance.)
    
       Program source
    
           #include <stdint.h>
           #include <string.h>
           #include <time.h>
           #include <stdio.h>
    
           int
           main(int argc, char argv[])
           {
           #define LIM 4000000
               char p[LIM + 1];    / +1 for terminating null byte /
               time_t base;
    
               base = time(NULL);
               p[0] = '\0';
    
               for (int j = 0; j < LIM; j++) {
                   if ((j % 10000) == 0)
                       printf("%d %jd\n", j, (intmax_t) (time(NULL) - base));
                   strcat(p, "a");
               }
           }
    
## SEE ALSO         top
    
    
           bcopy(3), memccpy(3), memcpy(3), strcpy(3), string(3),
           strncpy(3), wcscat(3), wcsncat(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                      STRCAT(3)
    
