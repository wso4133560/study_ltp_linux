  
# pthread_attr_setstack(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | ATTRIBUTES
| CONFORMING TO | NOTES | EXAMPLES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    PTHREAD_ATTR_SETSTACK(3)Linux Programmer's ManualTHREAD_ATTR_SETSTACK(3)
    
## NAME         top
    
    
           pthread_attr_setstack, pthread_attr_getstack - set/get stack
           attributes in thread attributes object
    
## SYNOPSIS         top
    
    
           #include <pthread.h>
    
           int pthread_attr_setstack(pthread_attr_t  _attr_ ,
                                     void  _stackaddr_ , size_t _stacksize_ );
           int pthread_attr_getstack(const pthread_attr_t restrict _attr_ ,
                                     void restrict _stackaddr_ ,
                                     size_t restrict _stacksize_ );
    
           Compile and link with _-pthread_.
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           pthread_attr_getstack (), pthread_attr_setstack ():
               _POSIX_C_SOURCE >= 200112L
    
## DESCRIPTION         top
    
    
           The pthread_attr_setstack () function sets the stack address and
           stack size attributes of the thread attributes object referred to
           by _attr_ to the values specified in _stackaddr_ and _stacksize_ ,
           respectively.  These attributes specify the location and size of
           the stack that should be used by a thread that is created using
           the thread attributes object _attr_.
    
           _stackaddr_ should point to the lowest addressable byte of a buffer
           of _stacksize_ bytes that was allocated by the caller.  The pages
           of the allocated buffer should be both readable and writable.
    
           The pthread_attr_getstack () function returns the stack address
           and stack size attributes of the thread attributes object
           referred to by _attr_ in the buffers pointed to by _stackaddr_ and
           _stacksize_ , respectively.
    
## RETURN VALUE         top
    
    
           On success, these functions return 0; on error, they return a
           nonzero error number.
    
## ERRORS         top
    
    
           pthread_attr_setstack () can fail with the following error:
    
           EINVAL _stacksize_ is less than PTHREAD_STACK_MIN (16384) bytes.
                  On some systems, this error may also occur if _stackaddr_ or
                  _stackaddr + stacksize_ is not suitably aligned.
    
           POSIX.1 also documents an EACCES error if the stack area
           described by _stackaddr_ and _stacksize_ is not both readable and
           writable by the caller.
    
## VERSIONS         top
    
    
           These functions are provided by glibc since version 2.2.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ pthread_attr_setstack (),              │ Thread safety │ MT-Safe │
           │ pthread_attr_getstack ()               │               │         │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008.
    
## NOTES         top
    
    
           These functions are provided for applications that must ensure
           that a thread's stack is placed in a particular location.  For
           most applications, this is not necessary, and the use of these
           functions should be avoided.  (Use pthread_attr_setstacksize(3)
           if an application simply requires a stack size other than the
           default.)
    
           When an application employs pthread_attr_setstack (), it takes
           over the responsibility of allocating the stack.  Any guard size
           value that was set using pthread_attr_setguardsize(3) is ignored.
           If deemed necessary, it is the application's responsibility to
           allocate a guard area (one or more pages protected against
           reading and writing) to handle the possibility of stack overflow.
    
           The address specified in _stackaddr_ should be suitably aligned:
           for full portability, align it on a page boundary
           ( _sysconf(_SC_PAGESIZE)_ ).  posix_memalign(3) may be useful for
           allocation.  Probably, _stacksize_ should also be a multiple of the
           system page size.
    
           If _attr_ is used to create multiple threads, then the caller must
           change the stack address attribute between calls to
           pthread_create(3); otherwise, the threads will attempt to use the
           same memory area for their stacks, and chaos will ensue.
    
## EXAMPLES         top
    
    
           See pthread_attr_init(3).
    
## SEE ALSO         top
    
    
           mmap(2), mprotect(2), posix_memalign(3), pthread_attr_init(3),
           pthread_attr_setguardsize(3), pthread_attr_setstackaddr(3),
           pthread_attr_setstacksize(3), pthread_create(3), pthreads(7)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22       PTHREAD_ATTR_SETSTACK(3)
    
