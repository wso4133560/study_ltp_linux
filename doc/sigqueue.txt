  
# sigqueue(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | ATTRIBUTES
| CONFORMING TO | NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    SIGQUEUE(3)             Linux Programmer's Manual            SIGQUEUE(3)
    
## NAME         top
    
    
           sigqueue - queue a signal and data to a process
    
## SYNOPSIS         top
    
    
           #include <signal.h>
    
           int sigqueue(pid_t _pid_ , int _sig_ , const union sigval _value_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           sigqueue ():
               _POSIX_C_SOURCE >= 199309L
    
## DESCRIPTION         top
    
    
           sigqueue () sends the signal specified in _sig_ to the process whose
           PID is given in _pid_.  The permissions required to send a signal
           are the same as for kill(2).  As with kill(2), the null signal
           (0) can be used to check if a process with a given PID exists.
    
           The _value_ argument is used to specify an accompanying item of
           data (either an integer or a pointer value) to be sent with the
           signal, and has the following type:
    
               union sigval {
                   int   sival_int;
                   void sival_ptr;
               };
    
           If the receiving process has installed a handler for this signal
           using the SA_SIGINFO flag to sigaction(2), then it can obtain
           this data via the _si_value_ field of the _siginfo_t_ structure
           passed as the second argument to the handler.  Furthermore, the
           _si_code_ field of that structure will be set to SI_QUEUE.
    
## RETURN VALUE         top
    
    
           On success, sigqueue () returns 0, indicating that the signal was
           successfully queued to the receiving process.  Otherwise, -1 is
           returned and _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EAGAIN The limit of signals which may be queued has been reached.
                  (See signal(7) for further information.)
    
           EINVAL _sig_ was invalid.
    
           EPERM The process does not have permission to send the signal to
                  the receiving process.  For the required permissions, see
                  kill(2).
    
           ESRCH No process has a PID matching _pid_.
    
## VERSIONS         top
    
    
           sigqueue () and the underlying rt_sigqueueinfo () system call first
           appeared in Linux 2.2.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ sigqueue ()                            │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008.
    
## NOTES         top
    
    
           If this function results in the sending of a signal to the
           process that invoked it, and that signal was not blocked by the
           calling thread, and no other threads were willing to handle this
           signal (either by having it unblocked, or by waiting for it using
           sigwait(3)), then at least some signal must be delivered to this
           thread before this function returns.
    
       C library/kernel differences
           On Linux, sigqueue () is implemented using the rt_sigqueueinfo(2)
           system call.  The system call differs in its third argument,
           which is the _siginfo_t_ structure that will be supplied to the
           receiving process's signal handler or returned by the receiving
           process's sigtimedwait(2) call.  Inside the glibc sigqueue ()
           wrapper, this argument, _uinfo_ , is initialized as follows:
    
               uinfo.si_signo = sig;      / Argument supplied to sigqueue() /
               uinfo.si_code = SI_QUEUE;
               uinfo.si_pid = getpid();   / Process ID of sender /
               uinfo.si_uid = getuid();   / Real UID of sender /
               uinfo.si_value = val;      / Argument supplied to sigqueue() /
    
## SEE ALSO         top
    
    
           kill(2), rt_sigqueueinfo(2), sigaction(2), signal(2),
           pthread_sigqueue(3), sigwait(3), signal(7)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                    SIGQUEUE(3)
    
