  
# arch_prctl(2) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | CONFORMING TO | NOTES
| SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    ARCH_PRCTL(2)           Linux Programmer's Manual          ARCH_PRCTL(2)
    
## NAME         top
    
    
           arch_prctl - set architecture-specific thread state
    
## SYNOPSIS         top
    
    
           #include <asm/prctl.h>
           #include <sys/prctl.h>
    
           int arch_prctl(int _code_ , unsigned long _addr_ );
           int arch_prctl(int _code_ , unsigned long  _addr_ );
    
           _Note_ : There is no glibc wrapper for this system call; see NOTES.
    
## DESCRIPTION         top
    
    
           arch_prctl () sets architecture-specific process or thread state.
           _code_ selects a subfunction and passes argument _addr_ to it; _addr_
           is interpreted as either an _unsigned long_ for the "set"
           operations, or as an _unsigned long _ , for the "get" operations.
    
           Subfunctions for both x86 and x86-64 are:
    
           ARCH_SET_CPUID (since Linux 4.12)
                  Enable ( _addr != 0_ ) or disable ( _addr == 0_ ) the _cpuid_
                  instruction for the calling thread.  The instruction is
                  enabled by default.  If disabled, any execution of a _cpuid_
                  instruction will instead generate a SIGSEGV signal.  This
                  feature can be used to emulate _cpuid_ results that differ
                  from what the underlying hardware would have produced
                  (e.g., in a paravirtualization setting).
    
                  The ARCH_SET_CPUID setting is preserved across fork(2) and
                  clone(2) but reset to the default (i.e., _cpuid_ enabled) on
                  execve(2).
    
           ARCH_GET_CPUID (since Linux 4.12)
                  Return the setting of the flag manipulated by
                  ARCH_SET_CPUID as the result of the system call (1 for
                  enabled, 0 for disabled).  _addr_ is ignored.
    
           Subfunctions for x86-64 only are:
    
           ARCH_SET_FS
                  Set the 64-bit base for the _FS_ register to _addr_.
    
           ARCH_GET_FS
                  Return the 64-bit base value for the _FS_ register of the
                  calling thread in the _unsigned long_ pointed to by _addr_.
    
           ARCH_SET_GS
                  Set the 64-bit base for the _GS_ register to _addr_.
    
           ARCH_GET_GS
                  Return the 64-bit base value for the _GS_ register of the
                  calling thread in the _unsigned long_ pointed to by _addr_.
    
## RETURN VALUE         top
    
    
           On success, arch_prctl () returns 0; on error, -1 is returned, and
           _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EFAULT _addr_ points to an unmapped address or is outside the
                  process address space.
    
           EINVAL _code_ is not a valid subcommand.
    
           EPERM _addr_ is outside the process address space.
    
           ENODEV ARCH_SET_CPUID was requested, but the underlying hardware
                  does not support CPUID faulting.
    
## CONFORMING TO         top
    
    
           arch_prctl () is a Linux/x86-64 extension and should not be used
           in programs intended to be portable.
    
## NOTES         top
    
    
           arch_prctl () is supported only on Linux/x86-64 for 64-bit
           programs currently.
    
           The 64-bit base changes when a new 32-bit segment selector is
           loaded.
    
           ARCH_SET_GS is disabled in some kernels.
    
           Context switches for 64-bit segment bases are rather expensive.
           As an optimization, if a 32-bit TLS base address is used,
           arch_prctl () may use a real TLS entry as if set_thread_area(2)
           had been called, instead of manipulating the segment base
           register directly.  Memory in the first 2 GB of address space can
           be allocated by using mmap(2) with the MAP_32BIT flag.
    
           Because of the aforementioned optimization, using arch_prctl ()
           and set_thread_area(2) in the same thread is dangerous, as they
           may overwrite each other's TLS entries.
    
           Glibc does not provide a wrapper for this system call; call it
           using syscall(2).
    
           _FS_ may be already used by the threading library.  Programs that
           use ARCH_SET_FS directly are very likely to crash.
    
## SEE ALSO         top
    
    
           mmap(2), modify_ldt(2), prctl(2), set_thread_area(2)
    
           AMD X86-64 Programmer's manual
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                  ARCH_PRCTL(2)
    
