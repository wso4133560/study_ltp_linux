  
# strcpy(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ATTRIBUTES | CONFORMING TO |
NOTES | BUGS | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    STRCPY(3)               Linux Programmer's Manual              STRCPY(3)
    
## NAME         top
    
    
           strcpy, strncpy - copy a string
    
## SYNOPSIS         top
    
    
           #include <string.h>
    
           char strcpy(char restrict _dest_ , const char  _src_ );
           char strncpy(char restrict _dest_ , const char restrict _src_ , size_t _n_ );
    
## DESCRIPTION         top
    
    
           The strcpy () function copies the string pointed to by _src_ ,
           including the terminating null byte ('\0'), to the buffer pointed
           to by _dest_.  The strings may not overlap, and the destination
           string _dest_ must be large enough to receive the copy.  _Beware of_
           _buffer overruns!_  (See BUGS.)
    
           The strncpy () function is similar, except that at most _n_ bytes of
           _src_ are copied.  Warning : If there is no null byte among the
           first _n_ bytes of _src_ , the string placed in _dest_ will not be null-
           terminated.
    
           If the length of _src_ is less than _n_ , strncpy () writes additional
           null bytes to _dest_ to ensure that a total of _n_ bytes are written.
    
           A simple implementation of strncpy () might be:
    
               char 
               strncpy(char dest, const char src, size_t n)
               {
                   size_t i;
    
                   for (i = 0; i < n && src[i] != '\0'; i++)
                       dest[i] = src[i];
                   for ( ; i < n; i++)
                       dest[i] = '\0';
    
                   return dest;
               }
    
## RETURN VALUE         top
    
    
           The strcpy () and strncpy () functions return a pointer to the
           destination string _dest_.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ strcpy (), strncpy ()                   │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.
    
## NOTES         top
    
    
           Some programmers consider strncpy () to be inefficient and error
           prone.  If the programmer knows (i.e., includes code to test!)
           that the size of _dest_ is greater than the length of _src_ , then
           strcpy () can be used.
    
           One valid (and intended) use of strncpy () is to copy a C string
           to a fixed-length buffer while ensuring both that the buffer is
           not overflowed and that unused bytes in the destination buffer
           are zeroed out (perhaps to prevent information leaks if the
           buffer is to be written to media or transmitted to another
           process via an interprocess communication technique).
    
           If there is no terminating null byte in the first _n_ bytes of _src_ ,
           strncpy () produces an unterminated string in _dest_.  If _buf_ has
           length _buflen_ , you can force termination using something like the
           following:
    
               if (buflen > 0) {
                   strncpy(buf, str, buflen - 1);
                   buf[buflen - 1]= '\0';
               }
    
           (Of course, the above technique ignores the fact that, if _src_
           contains more than _buflen - 1_ bytes, information is lost in the
           copying to _dest_.)
    
       strlcpy()
           Some systems (the BSDs, Solaris, and others) provide the
           following function:
    
               size_t strlcpy(char dest, const char src, size_t size);
    
           This function is similar to strncpy (), but it copies at most
           _size-1_ bytes to _dest_ , always adds a terminating null byte, and
           does not pad the destination with (further) null bytes.  This
           function fixes some of the problems of strcpy () and strncpy (),
           but the caller must still handle the possibility of data loss if
           _size_ is too small.  The return value of the function is the
           length of _src_ , which allows truncation to be easily detected: if
           the return value is greater than or equal to _size_ , truncation
           occurred.  If loss of data matters, the caller _must_ either check
           the arguments before the call, or test the function return value.
           strlcpy () is not present in glibc and is not standardized by
           POSIX, but is available on Linux via the _libbsd_ library.
    
## BUGS         top
    
    
           If the destination string of a strcpy () is not large enough, then
           anything might happen.  Overflowing fixed-length string buffers
           is a favorite cracker technique for taking complete control of
           the machine.  Any time a program reads or copies data into a
           buffer, the program first needs to check that there's enough
           space.  This may be unnecessary if you can show that overflow is
           impossible, but be careful: programs can get changed over time,
           in ways that may make the impossible possible.
    
## SEE ALSO         top
    
    
           bcopy(3), memccpy(3), memcpy(3), memmove(3), stpcpy(3),
           stpncpy(3), strdup(3), string(3), wcscpy(3), wcsncpy(3)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                      STRCPY(3)
    
