  
# killpg(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | CONFORMING TO | NOTES
| SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    KILLPG(3)               Linux Programmer's Manual              KILLPG(3)
    
## NAME         top
    
    
           killpg - send signal to a process group
    
## SYNOPSIS         top
    
    
           #include <signal.h>
    
           int killpg(int _pgrp_ , int _sig_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           killpg ():
               _XOPEN_SOURCE >= 500
                   || / Since glibc 2.19: / _DEFAULT_SOURCE
                   || / Glibc <= 2.19: / _BSD_SOURCE
    
## DESCRIPTION         top
    
    
           killpg () sends the signal _sig_ to the process group _pgrp_.  See
           signal(7) for a list of signals.
    
           If _pgrp_ is 0, killpg () sends the signal to the calling process's
           process group.  (POSIX says: if _pgrp_ is less than or equal to 1,
           the behavior is undefined.)
    
           For the permissions required to send a signal to another process,
           see kill(2).
    
## RETURN VALUE         top
    
    
           On success, zero is returned.  On error, -1 is returned, and
           _errno_ is set to indicate the error.
    
## ERRORS         top
    
    
           EINVAL _sig_ is not a valid signal number.
    
           EPERM The process does not have permission to send the signal to
                  any of the target processes.  For the required
                  permissions, see kill(2).
    
           ESRCH No process can be found in the process group specified by
                  _pgrp_.
    
           ESRCH The process group was given as 0 but the sending process
                  does not have a process group.
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD ( killpg () first appeared
           in 4BSD).
    
## NOTES         top
    
    
           There are various differences between the permission checking in
           BSD-type systems and System V-type systems.  See the POSIX
           rationale for kill(3p).  A difference not mentioned by POSIX
           concerns the return value EPERM : BSD documents that no signal is
           sent and EPERM returned when the permission check failed for at
           least one target process, while POSIX documents EPERM only when
           the permission check failed for all target processes.
    
       C library/kernel differences
           On Linux, killpg () is implemented as a library function that
           makes the call _kill(-pgrp, sig)_.
    
## SEE ALSO         top
    
    
           getpgrp(2), kill(2), signal(2), capabilities(7), credentials(7)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    Linux                          2021-03-22                      KILLPG(3)
    
