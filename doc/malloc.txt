  
# malloc(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | ATTRIBUTES
| CONFORMING TO | NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    MALLOC(3)               Linux Programmer's Manual              MALLOC(3)
    
## NAME         top
    
    
           malloc, free, calloc, realloc, reallocarray - allocate and free
           dynamic memory
    
## SYNOPSIS         top
    
    
           #include <stdlib.h>
    
           void malloc(size_t _size_ );
           void free(void _ptr_ );
           void calloc(size_t _nmemb_ , size_t _size_ );
           void realloc(void _ptr_ , size_t _size_ );
           void reallocarray(void _ptr_ , size_t _nmemb_ , size_t _size_ );
    
       Feature Test Macro Requirements for glibc (see
       feature_test_macros(7)):
    
           reallocarray ():
               Since glibc 2.29:
                   _DEFAULT_SOURCE
               Glibc 2.28 and earlier:
                   _GNU_SOURCE
    
## DESCRIPTION         top
    
    
           The malloc () function allocates _size_ bytes and returns a pointer
           to the allocated memory.  _The memory is not initialized_.  If _size_
           is 0, then malloc () returns either NULL, or a unique pointer
           value that can later be successfully passed to free ().
    
           The free () function frees the memory space pointed to by _ptr_ ,
           which must have been returned by a previous call to malloc (),
           calloc (), or realloc ().  Otherwise, or if _free(ptr)_ has already
           been called before, undefined behavior occurs.  If _ptr_ is NULL,
           no operation is performed.
    
           The calloc () function allocates memory for an array of _nmemb_
           elements of _size_ bytes each and returns a pointer to the
           allocated memory.  The memory is set to zero.  If _nmemb_ or _size_
           is 0, then calloc () returns either NULL, or a unique pointer
           value that can later be successfully passed to free ().  If the
           multiplication of _nmemb_ and _size_ would result in integer
           overflow, then calloc () returns an error.  By contrast, an
           integer overflow would not be detected in the following call to
           malloc (), with the result that an incorrectly sized block of
           memory would be allocated:
    
               malloc(nmemb  size);
    
           The realloc () function changes the size of the memory block
           pointed to by _ptr_ to _size_ bytes.  The contents will be unchanged
           in the range from the start of the region up to the minimum of
           the old and new sizes.  If the new size is larger than the old
           size, the added memory will _not_ be initialized.  If _ptr_ is NULL,
           then the call is equivalent to _malloc(size)_ , for all values of
           _size_ ; if _size_ is equal to zero, and _ptr_ is not NULL, then the
           call is equivalent to _free(ptr)_ (this behavior is nonportable;
           see NOTES).  Unless _ptr_ is NULL, it must have been returned by an
           earlier call to malloc (), calloc (), or realloc ().  If the area
           pointed to was moved, a _free(ptr)_ is done.
    
           The reallocarray () function changes the size of the memory block
           pointed to by _ptr_ to be large enough for an array of _nmemb_
           elements, each of which is _size_ bytes.  It is equivalent to the
           call
    
                   realloc(ptr, nmemb  size);
    
           However, unlike that realloc () call, reallocarray () fails safely
           in the case where the multiplication would overflow.  If such an
           overflow occurs, reallocarray () returns NULL, sets _errno_ to
           ENOMEM , and leaves the original block of memory unchanged.
    
## RETURN VALUE         top
    
    
           The malloc () and calloc () functions return a pointer to the
           allocated memory, which is suitably aligned for any built-in
           type.  On error, these functions return NULL.  NULL may also be
           returned by a successful call to malloc () with a _size_ of zero, or
           by a successful call to calloc () with _nmemb_ or _size_ equal to
           zero.
    
           The free () function returns no value.
    
           The realloc () function returns a pointer to the newly allocated
           memory, which is suitably aligned for any built-in type, or NULL
           if the request failed.  The returned pointer may be the same as
           _ptr_ if the allocation was not moved (e.g., there was room to
           expand the allocation in-place), or different from _ptr_ if the
           allocation was moved to a new address.  If _size_ was equal to 0,
           either NULL or a pointer suitable to be passed to free () is
           returned.  If realloc () fails, the original block is left
           untouched; it is not freed or moved.
    
           On success, the reallocarray () function returns a pointer to the
           newly allocated memory.  On failure, it returns NULL and the
           original block of memory is left untouched.
    
## ERRORS         top
    
    
           calloc (), malloc (), realloc (), and reallocarray () can fail with
           the following error:
    
           ENOMEM Out of memory.  Possibly, the application hit the
                  RLIMIT_AS or RLIMIT_DATA limit described in getrlimit(2).
    
## VERSIONS         top
    
    
           reallocarray () first appeared in glibc in version 2.26.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ malloc (), free (), calloc (), realloc () │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           malloc (), free (), calloc (), realloc (): POSIX.1-2001,
           POSIX.1-2008, C89, C99.
    
           reallocarray () is a nonstandard extension that first appeared in
           OpenBSD 5.6 and FreeBSD 11.0.
    
## NOTES         top
    
    
           By default, Linux follows an optimistic memory allocation
           strategy.  This means that when malloc () returns non-NULL there
           is no guarantee that the memory really is available.  In case it
           turns out that the system is out of memory, one or more processes
           will be killed by the OOM killer.  For more information, see the
           description of _/proc/sys/vm/overcommit_memory_ and
           _/proc/sys/vm/oom_adj_ in proc(5), and the Linux kernel source file
           _Documentation/vm/overcommit-accounting.rst_.
    
           Normally, malloc () allocates memory from the heap, and adjusts
           the size of the heap as required, using sbrk(2).  When allocating
           blocks of memory larger than MMAP_THRESHOLD bytes, the glibc
           malloc () implementation allocates the memory as a private
           anonymous mapping using mmap(2).  MMAP_THRESHOLD is 128 kB by
           default, but is adjustable using mallopt(3).  Prior to Linux 4.7
           allocations performed using mmap(2) were unaffected by the
           RLIMIT_DATA resource limit; since Linux 4.7, this limit is also
           enforced for allocations performed using mmap(2).
    
           To avoid corruption in multithreaded applications, mutexes are
           used internally to protect the memory-management data structures
           employed by these functions.  In a multithreaded application in
           which threads simultaneously allocate and free memory, there
           could be contention for these mutexes.  To scalably handle memory
           allocation in multithreaded applications, glibc creates
           additional _memory allocation arenas_ if mutex contention is
           detected.  Each arena is a large region of memory that is
           internally allocated by the system (using brk(2) or mmap(2)), and
           managed with its own mutexes.
    
           SUSv2 requires malloc (), calloc (), and realloc () to set _errno_ to
           ENOMEM upon failure.  Glibc assumes that this is done (and the
           glibc versions of these routines do this); if you use a private
           malloc implementation that does not set _errno_ , then certain
           library routines may fail without having a reason in _errno_.
    
           Crashes in malloc (), calloc (), realloc (), or free () are almost
           always related to heap corruption, such as overflowing an
           allocated chunk or freeing the same pointer twice.
    
           The malloc () implementation is tunable via environment variables;
           see mallopt(3) for details.
    
       Nonportable behavior
           The behavior of realloc () when _size_ is equal to zero, and _ptr_ is
           not NULL, is glibc specific; other implementations may return
           NULL, and set _errno_.  Portable POSIX programs should avoid it.
           See realloc(3p).
    
## SEE ALSO         top
    
    
           valgrind(1), brk(2), mmap(2), alloca(3), malloc_get_state(3),
           malloc_info(3), malloc_trim(3), malloc_usable_size(3),
           mallopt(3), mcheck(3), mtrace(3), posix_memalign(3)
    
           For details of the GNU C library implementation, see 
           ⟨https://sourceware.org/glibc/wiki/MallocInternals⟩.
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
    GNU                            2021-03-22                      MALLOC(3)
    
