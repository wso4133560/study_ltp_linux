  
# aio_write(3) -- Linux manual page
NAME | SYNOPSIS | DESCRIPTION | RETURN VALUE | ERRORS | VERSIONS | ATTRIBUTES
| CONFORMING TO | NOTES | SEE ALSO | COLOPHON  
  
---  
  
|  
      
    
    AIO_WRITE(3)            Linux Programmer's Manual           AIO_WRITE(3)
    
## NAME         top
    
    
           aio_write - asynchronous write
    
## SYNOPSIS         top
    
    
           #include <aio.h>
    
           int aio_write(struct aiocb  _aiocbp_ );
    
           Link with _-lrt_.
    
## DESCRIPTION         top
    
    
           The aio_write () function queues the I/O request described by the
           buffer pointed to by _aiocbp_.  This function is the asynchronous
           analog of write(2).  The arguments of the call
    
               write(fd, buf, count)
    
           correspond (in order) to the fields _aio_fildes_ , _aio_buf_ , and
           _aio_nbytes_ of the structure pointed to by _aiocbp_.  (See aio(7)
           for a description of the _aiocb_ structure.)
    
           If O_APPEND is not set, the data is written starting at the
           absolute position _aiocbp- >aio_offset_, regardless of the file
           offset.  If O_APPEND is set, data is written at the end of the
           file in the same order as aio_write () calls are made.  After the
           call, the value of the file offset is unspecified.
    
           The "asynchronous" means that this call returns as soon as the
           request has been enqueued; the write may or may not have
           completed when the call returns.  One tests for completion using
           aio_error(3).  The return status of a completed I/O operation can
           be obtained aio_return(3).  Asynchronous notification of I/O
           completion can be obtained by setting _aiocbp- >aio_sigevent_
           appropriately; see sigevent(7) for details.
    
           If _POSIX_PRIORITIZED_IO is defined, and this file supports it,
           then the asynchronous operation is submitted at a priority equal
           to that of the calling process minus _aiocbp- >aio_reqprio_.
    
           The field _aiocbp- >aio_lio_opcode_ is ignored.
    
           No data is written to a regular file beyond its maximum offset.
    
## RETURN VALUE         top
    
    
           On success, 0 is returned.  On error, the request is not
           enqueued, -1 is returned, and _errno_ is set to indicate the error.
           If an error is detected only later, it will be reported via
           aio_return(3) (returns status -1) and aio_error(3) (error status—
           whatever one would have gotten in _errno_ , such as EBADF ).
    
## ERRORS         top
    
    
           EAGAIN Out of resources.
    
           EBADF _aio_fildes_ is not a valid file descriptor open for
                  writing.
    
           EFBIG The file is a regular file, we want to write at least one
                  byte, but the starting position is at or beyond the
                  maximum offset for this file.
    
           EINVAL One or more of _aio_offset_ , _aio_reqprio_ , _aio_nbytes_ are
                  invalid.
    
           ENOSYS aio_write () is not implemented.
    
## VERSIONS         top
    
    
           The aio_write () function is available since glibc 2.1.
    
## ATTRIBUTES         top
    
    
           For an explanation of the terms used in this section, see
           attributes(7).
    
           ┌──────────────────────────────────────┬───────────────┬─────────┐
           │ Interface │ Attribute │ Value │
           ├──────────────────────────────────────┼───────────────┼─────────┤
           │ aio_write ()                           │ Thread safety │ MT-Safe │
           └──────────────────────────────────────┴───────────────┴─────────┘
    
## CONFORMING TO         top
    
    
           POSIX.1-2001, POSIX.1-2008.
    
## NOTES         top
    
    
           It is a good idea to zero out the control block before use.  The
           control block must not be changed while the write operation is in
           progress.  The buffer area being written out must not be accessed
           during the operation or undefined results may occur.  The memory
           areas involved must remain valid.
    
           Simultaneous I/O operations specifying the same _aiocb_ structure
           produce undefined results.
    
## SEE ALSO         top
    
    
           aio_cancel(3), aio_error(3), aio_fsync(3), aio_read(3),
           aio_return(3), aio_suspend(3), lio_listio(3), aio(7)
    
## COLOPHON         top
    
    
           This page is part of release 5.11 of the Linux _man-pages_ project.
           A description of the project, information about reporting bugs,
           and the latest version of this page, can be found at
           https://www.kernel.org/doc/man-pages/.
    
                                   2021-03-22                   AIO_WRITE(3)
    
